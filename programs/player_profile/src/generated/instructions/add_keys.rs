//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::AddKeyInput;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct AddKeys {
    /// The funder for the profile.
    pub funder: solana_program::pubkey::Pubkey,
    /// Key with [`ProfilePermissions::ADD_KEYS`] permission to add keys.
    pub key: solana_program::pubkey::Pubkey,
    /// The profile to add to
    pub profile: solana_program::pubkey::Pubkey,
    /// The system program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl AddKeys {
    pub fn instruction(
        &self,
        args: AddKeysInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AddKeysInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.funder,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&AddKeysInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::PLAYER_PROFILE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddKeysInstructionData {
    discriminator: [u8; 8],
}

impl AddKeysInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [154, 225, 16, 176, 146, 76, 78, 105],
        }
    }
}

impl Default for AddKeysInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddKeysInstructionArgs {
    pub key_add_index: u16,
    pub key_permissions_index: u16,
    pub keys_to_add: Vec<AddKeyInput>,
}

/// Instruction builder for `AddKeys`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funder
///   1. `[signer]` key
///   2. `[writable]` profile
///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct AddKeysBuilder {
    funder: Option<solana_program::pubkey::Pubkey>,
    key: Option<solana_program::pubkey::Pubkey>,
    profile: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    key_add_index: Option<u16>,
    key_permissions_index: Option<u16>,
    keys_to_add: Option<Vec<AddKeyInput>>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AddKeysBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The funder for the profile.
    #[inline(always)]
    pub fn funder(&mut self, funder: solana_program::pubkey::Pubkey) -> &mut Self {
        self.funder = Some(funder);
        self
    }
    /// Key with [`ProfilePermissions::ADD_KEYS`] permission to add keys.
    #[inline(always)]
    pub fn key(&mut self, key: solana_program::pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The profile to add to
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_program::pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The system program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn key_add_index(&mut self, key_add_index: u16) -> &mut Self {
        self.key_add_index = Some(key_add_index);
        self
    }
    #[inline(always)]
    pub fn key_permissions_index(&mut self, key_permissions_index: u16) -> &mut Self {
        self.key_permissions_index = Some(key_permissions_index);
        self
    }
    #[inline(always)]
    pub fn keys_to_add(&mut self, keys_to_add: Vec<AddKeyInput>) -> &mut Self {
        self.keys_to_add = Some(keys_to_add);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AddKeys {
            funder: self.funder.expect("funder is not set"),
            key: self.key.expect("key is not set"),
            profile: self.profile.expect("profile is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = AddKeysInstructionArgs {
            key_add_index: self
                .key_add_index
                .clone()
                .expect("key_add_index is not set"),
            key_permissions_index: self
                .key_permissions_index
                .clone()
                .expect("key_permissions_index is not set"),
            keys_to_add: self.keys_to_add.clone().expect("keys_to_add is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `add_keys` CPI accounts.
pub struct AddKeysCpiAccounts<'a, 'b> {
    /// The funder for the profile.
    pub funder: &'b solana_program::account_info::AccountInfo<'a>,
    /// Key with [`ProfilePermissions::ADD_KEYS`] permission to add keys.
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The profile to add to
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `add_keys` CPI instruction.
pub struct AddKeysCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The funder for the profile.
    pub funder: &'b solana_program::account_info::AccountInfo<'a>,
    /// Key with [`ProfilePermissions::ADD_KEYS`] permission to add keys.
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The profile to add to
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AddKeysInstructionArgs,
}

impl<'a, 'b> AddKeysCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AddKeysCpiAccounts<'a, 'b>,
        args: AddKeysInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            funder: accounts.funder,
            key: accounts.key,
            profile: accounts.profile,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.funder.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&AddKeysInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PLAYER_PROFILE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.funder.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AddKeys` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funder
///   1. `[signer]` key
///   2. `[writable]` profile
///   3. `[]` system_program
#[derive(Clone, Debug)]
pub struct AddKeysCpiBuilder<'a, 'b> {
    instruction: Box<AddKeysCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AddKeysCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AddKeysCpiBuilderInstruction {
            __program: program,
            funder: None,
            key: None,
            profile: None,
            system_program: None,
            key_add_index: None,
            key_permissions_index: None,
            keys_to_add: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The funder for the profile.
    #[inline(always)]
    pub fn funder(
        &mut self,
        funder: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.funder = Some(funder);
        self
    }
    /// Key with [`ProfilePermissions::ADD_KEYS`] permission to add keys.
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The profile to add to
    #[inline(always)]
    pub fn profile(
        &mut self,
        profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The system program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn key_add_index(&mut self, key_add_index: u16) -> &mut Self {
        self.instruction.key_add_index = Some(key_add_index);
        self
    }
    #[inline(always)]
    pub fn key_permissions_index(&mut self, key_permissions_index: u16) -> &mut Self {
        self.instruction.key_permissions_index = Some(key_permissions_index);
        self
    }
    #[inline(always)]
    pub fn keys_to_add(&mut self, keys_to_add: Vec<AddKeyInput>) -> &mut Self {
        self.instruction.keys_to_add = Some(keys_to_add);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = AddKeysInstructionArgs {
            key_add_index: self
                .instruction
                .key_add_index
                .clone()
                .expect("key_add_index is not set"),
            key_permissions_index: self
                .instruction
                .key_permissions_index
                .clone()
                .expect("key_permissions_index is not set"),
            keys_to_add: self
                .instruction
                .keys_to_add
                .clone()
                .expect("keys_to_add is not set"),
        };
        let instruction = AddKeysCpi {
            __program: self.instruction.__program,

            funder: self.instruction.funder.expect("funder is not set"),

            key: self.instruction.key.expect("key is not set"),

            profile: self.instruction.profile.expect("profile is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AddKeysCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    funder: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    key: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    key_add_index: Option<u16>,
    key_permissions_index: Option<u16>,
    keys_to_add: Option<Vec<AddKeyInput>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
