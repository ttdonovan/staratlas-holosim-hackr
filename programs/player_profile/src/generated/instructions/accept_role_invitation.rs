//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct AcceptRoleInvitation {
    /// The new member
    pub new_member: solana_program::pubkey::Pubkey,
    /// The role which the player is joining
    pub role_account: solana_program::pubkey::Pubkey,
    /// The role membership account for the new member
    pub role_membership_account: solana_program::pubkey::Pubkey,
}

impl AcceptRoleInvitation {
    pub fn instruction(
        &self,
        args: AcceptRoleInvitationInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AcceptRoleInvitationInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.new_member,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.role_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.role_membership_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&AcceptRoleInvitationInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::PLAYER_PROFILE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AcceptRoleInvitationInstructionData {
    discriminator: [u8; 8],
}

impl AcceptRoleInvitationInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [254, 252, 153, 44, 41, 232, 56, 107],
        }
    }
}

impl Default for AcceptRoleInvitationInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AcceptRoleInvitationInstructionArgs {
    pub key_index: u16,
    pub key_index_in_role_account: u16,
    pub key_index_in_membership_account: u16,
}

/// Instruction builder for `AcceptRoleInvitation`.
///
/// ### Accounts:
///
///   0. `[]` new_member
///   1. `[writable]` role_account
///   2. `[writable]` role_membership_account
#[derive(Clone, Debug, Default)]
pub struct AcceptRoleInvitationBuilder {
    new_member: Option<solana_program::pubkey::Pubkey>,
    role_account: Option<solana_program::pubkey::Pubkey>,
    role_membership_account: Option<solana_program::pubkey::Pubkey>,
    key_index: Option<u16>,
    key_index_in_role_account: Option<u16>,
    key_index_in_membership_account: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AcceptRoleInvitationBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The new member
    #[inline(always)]
    pub fn new_member(&mut self, new_member: solana_program::pubkey::Pubkey) -> &mut Self {
        self.new_member = Some(new_member);
        self
    }
    /// The role which the player is joining
    #[inline(always)]
    pub fn role_account(&mut self, role_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.role_account = Some(role_account);
        self
    }
    /// The role membership account for the new member
    #[inline(always)]
    pub fn role_membership_account(
        &mut self,
        role_membership_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.role_membership_account = Some(role_membership_account);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.key_index = Some(key_index);
        self
    }
    #[inline(always)]
    pub fn key_index_in_role_account(&mut self, key_index_in_role_account: u16) -> &mut Self {
        self.key_index_in_role_account = Some(key_index_in_role_account);
        self
    }
    #[inline(always)]
    pub fn key_index_in_membership_account(
        &mut self,
        key_index_in_membership_account: u16,
    ) -> &mut Self {
        self.key_index_in_membership_account = Some(key_index_in_membership_account);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AcceptRoleInvitation {
            new_member: self.new_member.expect("new_member is not set"),
            role_account: self.role_account.expect("role_account is not set"),
            role_membership_account: self
                .role_membership_account
                .expect("role_membership_account is not set"),
        };
        let args = AcceptRoleInvitationInstructionArgs {
            key_index: self.key_index.clone().expect("key_index is not set"),
            key_index_in_role_account: self
                .key_index_in_role_account
                .clone()
                .expect("key_index_in_role_account is not set"),
            key_index_in_membership_account: self
                .key_index_in_membership_account
                .clone()
                .expect("key_index_in_membership_account is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `accept_role_invitation` CPI accounts.
pub struct AcceptRoleInvitationCpiAccounts<'a, 'b> {
    /// The new member
    pub new_member: &'b solana_program::account_info::AccountInfo<'a>,
    /// The role which the player is joining
    pub role_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The role membership account for the new member
    pub role_membership_account: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `accept_role_invitation` CPI instruction.
pub struct AcceptRoleInvitationCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The new member
    pub new_member: &'b solana_program::account_info::AccountInfo<'a>,
    /// The role which the player is joining
    pub role_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The role membership account for the new member
    pub role_membership_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AcceptRoleInvitationInstructionArgs,
}

impl<'a, 'b> AcceptRoleInvitationCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AcceptRoleInvitationCpiAccounts<'a, 'b>,
        args: AcceptRoleInvitationInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            new_member: accounts.new_member,
            role_account: accounts.role_account,
            role_membership_account: accounts.role_membership_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.new_member.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.role_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.role_membership_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&AcceptRoleInvitationInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PLAYER_PROFILE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.new_member.clone());
        account_infos.push(self.role_account.clone());
        account_infos.push(self.role_membership_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AcceptRoleInvitation` via CPI.
///
/// ### Accounts:
///
///   0. `[]` new_member
///   1. `[writable]` role_account
///   2. `[writable]` role_membership_account
#[derive(Clone, Debug)]
pub struct AcceptRoleInvitationCpiBuilder<'a, 'b> {
    instruction: Box<AcceptRoleInvitationCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AcceptRoleInvitationCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AcceptRoleInvitationCpiBuilderInstruction {
            __program: program,
            new_member: None,
            role_account: None,
            role_membership_account: None,
            key_index: None,
            key_index_in_role_account: None,
            key_index_in_membership_account: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The new member
    #[inline(always)]
    pub fn new_member(
        &mut self,
        new_member: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_member = Some(new_member);
        self
    }
    /// The role which the player is joining
    #[inline(always)]
    pub fn role_account(
        &mut self,
        role_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.role_account = Some(role_account);
        self
    }
    /// The role membership account for the new member
    #[inline(always)]
    pub fn role_membership_account(
        &mut self,
        role_membership_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.role_membership_account = Some(role_membership_account);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.instruction.key_index = Some(key_index);
        self
    }
    #[inline(always)]
    pub fn key_index_in_role_account(&mut self, key_index_in_role_account: u16) -> &mut Self {
        self.instruction.key_index_in_role_account = Some(key_index_in_role_account);
        self
    }
    #[inline(always)]
    pub fn key_index_in_membership_account(
        &mut self,
        key_index_in_membership_account: u16,
    ) -> &mut Self {
        self.instruction.key_index_in_membership_account = Some(key_index_in_membership_account);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = AcceptRoleInvitationInstructionArgs {
            key_index: self
                .instruction
                .key_index
                .clone()
                .expect("key_index is not set"),
            key_index_in_role_account: self
                .instruction
                .key_index_in_role_account
                .clone()
                .expect("key_index_in_role_account is not set"),
            key_index_in_membership_account: self
                .instruction
                .key_index_in_membership_account
                .clone()
                .expect("key_index_in_membership_account is not set"),
        };
        let instruction = AcceptRoleInvitationCpi {
            __program: self.instruction.__program,

            new_member: self.instruction.new_member.expect("new_member is not set"),

            role_account: self
                .instruction
                .role_account
                .expect("role_account is not set"),

            role_membership_account: self
                .instruction
                .role_membership_account
                .expect("role_membership_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AcceptRoleInvitationCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    new_member: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    role_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    role_membership_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    key_index: Option<u16>,
    key_index_in_role_account: Option<u16>,
    key_index_in_membership_account: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
