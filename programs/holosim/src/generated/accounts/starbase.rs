//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Starbase

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Starbase {
    pub discriminator: [u8; 8],
    /// The data version of this `Starbase` account.
    pub version: u8,
    /// the game_id that this `Starbase` belongs to
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub game_id: Pubkey,
    /// the sector that this `Starbase` belongs to
    pub sector: [i64; 2],
    /// the [`CraftingFacility`] to use for crafting at this `Starbase`
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub crafting_facility: Pubkey,
    /// the [`CraftingFacility`] to use for upgrade jobs at this `Starbase`
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub upgrade_facility: Pubkey,
    /// The name of this `Starbase`
    #[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
    pub name: [u8; 64],
    /// coordinates as [x, y]
    pub sub_coordinates: [i64; 2],
    /// The faction of the `Starbase`.
    pub faction: u8,
    /// bump for PDA
    pub bump: u8,
    /// The sequence id for the `Starbase`
    pub seq_id: u16,
    /// The state of the `Starbase`. Is a [`StarbaseState`].
    pub state: u8,
    /// The level of the `Starbase`.
    pub level: u8,
    /// The `Starbase` health points.
    pub hp: u64,
    /// The `Starbase` shield points.
    pub sp: u64,
    /// The planet position (`sector::state::Ring`) available for this `Starbase`
    pub sector_ring_available: u8,
    /// The `Starbase` upgrade state
    pub upgrade_state: u8,
    /// used to check if expected upgrade ingredients have been supplied
    pub upgrade_ingredients_checksum: [u8; 16],
    /// number of ingredients needed for starbase upgrade
    pub num_upgrade_ingredients: u8,
    /// The balance of ammo for upkeep
    pub upkeep_ammo_balance: u64,
    /// The last time ammo for upkeep was updated (Local time)
    pub upkeep_ammo_last_update: i64,
    /// The last time ammo for upkeep was updated (Global time)
    pub upkeep_ammo_global_last_update: i64,
    /// The balance of food for upkeep
    pub upkeep_food_balance: u64,
    /// The last time food for upkeep was updated (Local time)
    pub upkeep_food_last_update: i64,
    /// The last time food for upkeep was updated (Global time)
    pub upkeep_food_global_last_update: i64,
    /// The balance of toolkits for upkeep
    pub upkeep_toolkit_balance: u64,
    /// The last time toolkits for upkeep was updated (Local time)
    pub upkeep_toolkit_last_update: i64,
    /// The last time toolkits for upkeep was updated (Global time)
    pub upkeep_toolkit_global_last_update: i64,
    /// The last time the starbase was built or destroyed
    pub built_destroyed_timestamp: i64,
    /// The time at which SP can resume regenerating
    pub shield_break_delay_expires_at: i64,
}

impl Starbase {
    pub const LEN: usize = 330;

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Starbase {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "fetch")]
pub fn fetch_starbase(
    rpc: &solana_client::rpc_client::RpcClient,
    address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<Starbase>, std::io::Error> {
    let accounts = fetch_all_starbase(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_starbase(
    rpc: &solana_client::rpc_client::RpcClient,
    addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<Starbase>>, std::io::Error> {
    let accounts = rpc
        .get_multiple_accounts(addresses)
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<Starbase>> = Vec::new();
    for i in 0..addresses.len() {
        let address = addresses[i];
        let account = accounts[i].as_ref().ok_or(std::io::Error::new(
            std::io::ErrorKind::Other,
            format!("Account not found: {}", address),
        ))?;
        let data = Starbase::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::DecodedAccount {
            address,
            account: account.clone(),
            data,
        });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_starbase(
    rpc: &solana_client::rpc_client::RpcClient,
    address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<Starbase>, std::io::Error> {
    let accounts = fetch_all_maybe_starbase(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_starbase(
    rpc: &solana_client::rpc_client::RpcClient,
    addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<Starbase>>, std::io::Error> {
    let accounts = rpc
        .get_multiple_accounts(addresses)
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<Starbase>> = Vec::new();
    for i in 0..addresses.len() {
        let address = addresses[i];
        if let Some(account) = accounts[i].as_ref() {
            let data = Starbase::from_bytes(&account.data)?;
            decoded_accounts.push(crate::shared::MaybeAccount::Exists(
                crate::shared::DecodedAccount {
                    address,
                    account: account.clone(),
                    data,
                },
            ));
        } else {
            decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
        }
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for Starbase {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for Starbase {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for Starbase {
    fn owner() -> Pubkey {
        crate::SAGE_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for Starbase {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for Starbase {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
}
