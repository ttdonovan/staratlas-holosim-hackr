//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::OptionalNonSystemPubkey;
use crate::generated::types::ShipCounts;
use crate::generated::types::ShipStats;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_pubkey::Pubkey;

/// A `SAGE` fleet.

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Fleet {
    pub discriminator: [u8; 8],
    /// The data version of this account.
    pub version: u8,
    /// The game id this belongs to.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub game_id: Pubkey,
    /// The owner's profile.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub owner_profile: Pubkey,
    /// Fleet Ships Key
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fleet_ships: Pubkey,
    /// The fleet's sub-authority.
    /// If [`Some`] will have the exclusive ability to interact with this fleet.
    pub sub_profile: OptionalNonSystemPubkey,
    /// The authority for revoking a sun-authority.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub sub_profile_invalidator: Pubkey,
    /// The faction of the profile.
    pub faction: u8,
    /// The label or name of the fleet.
    pub fleet_label: [u8; 32],
    /// The number of ships in the fleet.
    pub ship_counts: ShipCounts,
    /// The time at which the warp cooldown expires
    pub warp_cooldown_expires_at: i64,
    /// The time at which the scan cooldown expires
    pub scan_cooldown_expires_at: i64,
    /// The fleet's stats.
    pub stats: ShipStats,
    /// The Cargo pod representing the fleet's cargo hold
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub cargo_hold: Pubkey,
    /// The Cargo pod representing the fleet's fuel tank
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub fuel_tank: Pubkey,
    /// The Cargo pod representing the fleet's ammo bank
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub ammo_bank: Pubkey,
    /// Current fleet action points
    pub ap: u32,
    /// Current fleet shield points
    pub sp: u32,
    /// Current fleet health points
    pub hp: u32,
    /// Current fleet pending health points
    pub pending_hp: u32,
    /// The time at which reloading completes
    pub ap_reload_expires_at: i64,
    /// The time at which SP can resume regenerating
    pub shield_break_delay_expires_at: i64,
    /// The last time the combat was updated
    pub last_combat_update: i64,
    /// The update id for the `Fleet`
    pub update_id: u64,
    /// The fleet's bump.
    pub bump: u8,
}

pub const FLEET_DISCRIMINATOR: [u8; 8] = [109, 207, 251, 48, 106, 2, 136, 163];

impl Fleet {
    pub const LEN: usize = 523;

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_account_info::AccountInfo<'a>> for Fleet {
    type Error = std::io::Error;

    fn try_from(account_info: &solana_account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "fetch")]
pub fn fetch_fleet(
    rpc: &solana_client::rpc_client::RpcClient,
    address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<Fleet>, std::io::Error> {
    let accounts = fetch_all_fleet(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_fleet(
    rpc: &solana_client::rpc_client::RpcClient,
    addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<Fleet>>, std::io::Error> {
    let accounts = rpc
        .get_multiple_accounts(addresses)
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<Fleet>> = Vec::new();
    for i in 0..addresses.len() {
        let address = addresses[i];
        let account = accounts[i].as_ref().ok_or(std::io::Error::new(
            std::io::ErrorKind::Other,
            format!("Account not found: {}", address),
        ))?;
        let data = Fleet::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::DecodedAccount {
            address,
            account: account.clone(),
            data,
        });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_fleet(
    rpc: &solana_client::rpc_client::RpcClient,
    address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<Fleet>, std::io::Error> {
    let accounts = fetch_all_maybe_fleet(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_fleet(
    rpc: &solana_client::rpc_client::RpcClient,
    addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<Fleet>>, std::io::Error> {
    let accounts = rpc
        .get_multiple_accounts(addresses)
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<Fleet>> = Vec::new();
    for i in 0..addresses.len() {
        let address = addresses[i];
        if let Some(account) = accounts[i].as_ref() {
            let data = Fleet::from_bytes(&account.data)?;
            decoded_accounts.push(crate::shared::MaybeAccount::Exists(
                crate::shared::DecodedAccount {
                    address,
                    account: account.clone(),
                    data,
                },
            ));
        } else {
            decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
        }
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for Fleet {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for Fleet {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for Fleet {
    fn owner() -> Pubkey {
        crate::SAGE_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for Fleet {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for Fleet {
    const DISCRIMINATOR: &[u8] = &[0; 8];
}
