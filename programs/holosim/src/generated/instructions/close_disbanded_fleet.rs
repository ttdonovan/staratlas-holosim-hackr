//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct CloseDisbandedFleet {
    /// The key on the player profile.
    pub key: solana_program::pubkey::Pubkey,
    /// The player profile.
    pub player_profile: solana_program::pubkey::Pubkey,
    /// The funds_to - receives rent refund
    pub funds_to: solana_program::pubkey::Pubkey,
    /// The [`DisbandedFleet`] account
    pub disbanded_fleet: solana_program::pubkey::Pubkey,
    /// The [`FleetShips`] account
    pub fleet_ships: solana_program::pubkey::Pubkey,
}

impl CloseDisbandedFleet {
    pub fn instruction(
        &self,
        args: CloseDisbandedFleetInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CloseDisbandedFleetInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.player_profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.funds_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.disbanded_fleet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fleet_ships,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CloseDisbandedFleetInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CloseDisbandedFleetInstructionData {
    discriminator: [u8; 8],
}

impl CloseDisbandedFleetInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [214, 150, 149, 156, 245, 123, 37, 165],
        }
    }
}

impl Default for CloseDisbandedFleetInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CloseDisbandedFleetInstructionArgs {
    pub key_index: u16,
}

/// Instruction builder for `CloseDisbandedFleet`.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` player_profile
///   2. `[writable]` funds_to
///   3. `[writable]` disbanded_fleet
///   4. `[writable]` fleet_ships
#[derive(Clone, Debug, Default)]
pub struct CloseDisbandedFleetBuilder {
    key: Option<solana_program::pubkey::Pubkey>,
    player_profile: Option<solana_program::pubkey::Pubkey>,
    funds_to: Option<solana_program::pubkey::Pubkey>,
    disbanded_fleet: Option<solana_program::pubkey::Pubkey>,
    fleet_ships: Option<solana_program::pubkey::Pubkey>,
    key_index: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CloseDisbandedFleetBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The key on the player profile.
    #[inline(always)]
    pub fn key(&mut self, key: solana_program::pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The player profile.
    #[inline(always)]
    pub fn player_profile(&mut self, player_profile: solana_program::pubkey::Pubkey) -> &mut Self {
        self.player_profile = Some(player_profile);
        self
    }
    /// The funds_to - receives rent refund
    #[inline(always)]
    pub fn funds_to(&mut self, funds_to: solana_program::pubkey::Pubkey) -> &mut Self {
        self.funds_to = Some(funds_to);
        self
    }
    /// The [`DisbandedFleet`] account
    #[inline(always)]
    pub fn disbanded_fleet(
        &mut self,
        disbanded_fleet: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.disbanded_fleet = Some(disbanded_fleet);
        self
    }
    /// The [`FleetShips`] account
    #[inline(always)]
    pub fn fleet_ships(&mut self, fleet_ships: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fleet_ships = Some(fleet_ships);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CloseDisbandedFleet {
            key: self.key.expect("key is not set"),
            player_profile: self.player_profile.expect("player_profile is not set"),
            funds_to: self.funds_to.expect("funds_to is not set"),
            disbanded_fleet: self.disbanded_fleet.expect("disbanded_fleet is not set"),
            fleet_ships: self.fleet_ships.expect("fleet_ships is not set"),
        };
        let args = CloseDisbandedFleetInstructionArgs {
            key_index: self.key_index.clone().expect("key_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `close_disbanded_fleet` CPI accounts.
pub struct CloseDisbandedFleetCpiAccounts<'a, 'b> {
    /// The key on the player profile.
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The player profile.
    pub player_profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The funds_to - receives rent refund
    pub funds_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`DisbandedFleet`] account
    pub disbanded_fleet: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`FleetShips`] account
    pub fleet_ships: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `close_disbanded_fleet` CPI instruction.
pub struct CloseDisbandedFleetCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The key on the player profile.
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The player profile.
    pub player_profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The funds_to - receives rent refund
    pub funds_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`DisbandedFleet`] account
    pub disbanded_fleet: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`FleetShips`] account
    pub fleet_ships: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CloseDisbandedFleetInstructionArgs,
}

impl<'a, 'b> CloseDisbandedFleetCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CloseDisbandedFleetCpiAccounts<'a, 'b>,
        args: CloseDisbandedFleetInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            key: accounts.key,
            player_profile: accounts.player_profile,
            funds_to: accounts.funds_to,
            disbanded_fleet: accounts.disbanded_fleet,
            fleet_ships: accounts.fleet_ships,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.player_profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.funds_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.disbanded_fleet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fleet_ships.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CloseDisbandedFleetInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.player_profile.clone());
        account_infos.push(self.funds_to.clone());
        account_infos.push(self.disbanded_fleet.clone());
        account_infos.push(self.fleet_ships.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CloseDisbandedFleet` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` player_profile
///   2. `[writable]` funds_to
///   3. `[writable]` disbanded_fleet
///   4. `[writable]` fleet_ships
#[derive(Clone, Debug)]
pub struct CloseDisbandedFleetCpiBuilder<'a, 'b> {
    instruction: Box<CloseDisbandedFleetCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CloseDisbandedFleetCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CloseDisbandedFleetCpiBuilderInstruction {
            __program: program,
            key: None,
            player_profile: None,
            funds_to: None,
            disbanded_fleet: None,
            fleet_ships: None,
            key_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The key on the player profile.
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The player profile.
    #[inline(always)]
    pub fn player_profile(
        &mut self,
        player_profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.player_profile = Some(player_profile);
        self
    }
    /// The funds_to - receives rent refund
    #[inline(always)]
    pub fn funds_to(
        &mut self,
        funds_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.funds_to = Some(funds_to);
        self
    }
    /// The [`DisbandedFleet`] account
    #[inline(always)]
    pub fn disbanded_fleet(
        &mut self,
        disbanded_fleet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.disbanded_fleet = Some(disbanded_fleet);
        self
    }
    /// The [`FleetShips`] account
    #[inline(always)]
    pub fn fleet_ships(
        &mut self,
        fleet_ships: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fleet_ships = Some(fleet_ships);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.instruction.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CloseDisbandedFleetInstructionArgs {
            key_index: self
                .instruction
                .key_index
                .clone()
                .expect("key_index is not set"),
        };
        let instruction = CloseDisbandedFleetCpi {
            __program: self.instruction.__program,

            key: self.instruction.key.expect("key is not set"),

            player_profile: self
                .instruction
                .player_profile
                .expect("player_profile is not set"),

            funds_to: self.instruction.funds_to.expect("funds_to is not set"),

            disbanded_fleet: self
                .instruction
                .disbanded_fleet
                .expect("disbanded_fleet is not set"),

            fleet_ships: self
                .instruction
                .fleet_ships
                .expect("fleet_ships is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CloseDisbandedFleetCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    key: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    player_profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    funds_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    disbanded_fleet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fleet_ships: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    key_index: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
