//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const WARP_LANE_DISCRIMINATOR: [u8; 8] = [232, 188, 195, 49, 100, 72, 231, 243];

/// Accounts.
#[derive(Debug)]
pub struct WarpLane {
    /// The key on the profile.
    pub key: solana_pubkey::Pubkey,
    /// The profile that owns the fleet.
    pub owning_profile: solana_pubkey::Pubkey,
    /// The faction that the profile belongs to.
    pub owning_profile_faction: solana_pubkey::Pubkey,
    /// The fleet.
    pub fleet: solana_pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_pubkey::Pubkey,
    /// The [`GameState`] account
    pub game_state: solana_pubkey::Pubkey,
    /// The [`Starbase`] account
    pub from_starbase: solana_pubkey::Pubkey,
    /// The [`Starbase`] account
    pub to_starbase: solana_pubkey::Pubkey,
    /// The Sector account representing the fleet`s  current sector
    pub from_sector: solana_pubkey::Pubkey,
    /// The Sector account that `Fleet` will move to
    pub to_sector: solana_pubkey::Pubkey,
    /// The fuel tank cargo pod
    pub fuel_tank: solana_pubkey::Pubkey,
    /// The `Cargo Type` Account
    pub cargo_type: solana_pubkey::Pubkey,
    /// The `CargoStatsDefinition` for the cargo type
    pub stats_definition: solana_pubkey::Pubkey,
    /// The fuel source token account - owned by the `fuel_tank`
    pub fuel_token_from: solana_pubkey::Pubkey,
    /// Token Mint - The fuel mint
    pub fuel_mint: solana_pubkey::Pubkey,
    /// The fee source token account
    pub fee_token_from: solana_pubkey::Pubkey,
    /// The fee destination token account
    pub fee_token_to: solana_pubkey::Pubkey,
    /// Fee Token Mint
    pub fee_mint: solana_pubkey::Pubkey,
    /// The Cargo Program
    pub cargo_program: solana_pubkey::Pubkey,
    /// Token Program
    pub token_program: solana_pubkey::Pubkey,
}

impl WarpLane {
    pub fn instruction(&self, args: WarpLaneInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: WarpLaneInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owning_profile,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owning_profile_faction,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.fleet, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_state,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.from_starbase,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.to_starbase,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.from_sector,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.to_sector,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.fuel_tank, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.cargo_type,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.stats_definition,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.fuel_token_from,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.fuel_mint, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.fee_token_from,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.fee_token_to,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.fee_mint, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.cargo_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&WarpLaneInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WarpLaneInstructionData {
    discriminator: [u8; 8],
}

impl WarpLaneInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [232, 188, 195, 49, 100, 72, 231, 243],
        }
    }
}

impl Default for WarpLaneInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WarpLaneInstructionArgs {
    pub key_index: u16,
    pub to_sector_index: u16,
    pub from_sector_index: u16,
}

/// Instruction builder for `WarpLane`.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` owning_profile
///   2. `[]` owning_profile_faction
///   3. `[writable]` fleet
///   4. `[]` game_id
///   5. `[]` game_state
///   6. `[]` from_starbase
///   7. `[]` to_starbase
///   8. `[]` from_sector
///   9. `[]` to_sector
///   10. `[writable]` fuel_tank
///   11. `[]` cargo_type
///   12. `[]` stats_definition
///   13. `[writable]` fuel_token_from
///   14. `[writable]` fuel_mint
///   15. `[writable]` fee_token_from
///   16. `[writable]` fee_token_to
///   17. `[writable]` fee_mint
///   18. `[]` cargo_program
///   19. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct WarpLaneBuilder {
    key: Option<solana_pubkey::Pubkey>,
    owning_profile: Option<solana_pubkey::Pubkey>,
    owning_profile_faction: Option<solana_pubkey::Pubkey>,
    fleet: Option<solana_pubkey::Pubkey>,
    game_id: Option<solana_pubkey::Pubkey>,
    game_state: Option<solana_pubkey::Pubkey>,
    from_starbase: Option<solana_pubkey::Pubkey>,
    to_starbase: Option<solana_pubkey::Pubkey>,
    from_sector: Option<solana_pubkey::Pubkey>,
    to_sector: Option<solana_pubkey::Pubkey>,
    fuel_tank: Option<solana_pubkey::Pubkey>,
    cargo_type: Option<solana_pubkey::Pubkey>,
    stats_definition: Option<solana_pubkey::Pubkey>,
    fuel_token_from: Option<solana_pubkey::Pubkey>,
    fuel_mint: Option<solana_pubkey::Pubkey>,
    fee_token_from: Option<solana_pubkey::Pubkey>,
    fee_token_to: Option<solana_pubkey::Pubkey>,
    fee_mint: Option<solana_pubkey::Pubkey>,
    cargo_program: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    key_index: Option<u16>,
    to_sector_index: Option<u16>,
    from_sector_index: Option<u16>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl WarpLaneBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The key on the profile.
    #[inline(always)]
    pub fn key(&mut self, key: solana_pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The profile that owns the fleet.
    #[inline(always)]
    pub fn owning_profile(&mut self, owning_profile: solana_pubkey::Pubkey) -> &mut Self {
        self.owning_profile = Some(owning_profile);
        self
    }
    /// The faction that the profile belongs to.
    #[inline(always)]
    pub fn owning_profile_faction(
        &mut self,
        owning_profile_faction: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.owning_profile_faction = Some(owning_profile_faction);
        self
    }
    /// The fleet.
    #[inline(always)]
    pub fn fleet(&mut self, fleet: solana_pubkey::Pubkey) -> &mut Self {
        self.fleet = Some(fleet);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(&mut self, game_state: solana_pubkey::Pubkey) -> &mut Self {
        self.game_state = Some(game_state);
        self
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn from_starbase(&mut self, from_starbase: solana_pubkey::Pubkey) -> &mut Self {
        self.from_starbase = Some(from_starbase);
        self
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn to_starbase(&mut self, to_starbase: solana_pubkey::Pubkey) -> &mut Self {
        self.to_starbase = Some(to_starbase);
        self
    }
    /// The Sector account representing the fleet`s  current sector
    #[inline(always)]
    pub fn from_sector(&mut self, from_sector: solana_pubkey::Pubkey) -> &mut Self {
        self.from_sector = Some(from_sector);
        self
    }
    /// The Sector account that `Fleet` will move to
    #[inline(always)]
    pub fn to_sector(&mut self, to_sector: solana_pubkey::Pubkey) -> &mut Self {
        self.to_sector = Some(to_sector);
        self
    }
    /// The fuel tank cargo pod
    #[inline(always)]
    pub fn fuel_tank(&mut self, fuel_tank: solana_pubkey::Pubkey) -> &mut Self {
        self.fuel_tank = Some(fuel_tank);
        self
    }
    /// The `Cargo Type` Account
    #[inline(always)]
    pub fn cargo_type(&mut self, cargo_type: solana_pubkey::Pubkey) -> &mut Self {
        self.cargo_type = Some(cargo_type);
        self
    }
    /// The `CargoStatsDefinition` for the cargo type
    #[inline(always)]
    pub fn stats_definition(&mut self, stats_definition: solana_pubkey::Pubkey) -> &mut Self {
        self.stats_definition = Some(stats_definition);
        self
    }
    /// The fuel source token account - owned by the `fuel_tank`
    #[inline(always)]
    pub fn fuel_token_from(&mut self, fuel_token_from: solana_pubkey::Pubkey) -> &mut Self {
        self.fuel_token_from = Some(fuel_token_from);
        self
    }
    /// Token Mint - The fuel mint
    #[inline(always)]
    pub fn fuel_mint(&mut self, fuel_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.fuel_mint = Some(fuel_mint);
        self
    }
    /// The fee source token account
    #[inline(always)]
    pub fn fee_token_from(&mut self, fee_token_from: solana_pubkey::Pubkey) -> &mut Self {
        self.fee_token_from = Some(fee_token_from);
        self
    }
    /// The fee destination token account
    #[inline(always)]
    pub fn fee_token_to(&mut self, fee_token_to: solana_pubkey::Pubkey) -> &mut Self {
        self.fee_token_to = Some(fee_token_to);
        self
    }
    /// Fee Token Mint
    #[inline(always)]
    pub fn fee_mint(&mut self, fee_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.fee_mint = Some(fee_mint);
        self
    }
    /// The Cargo Program
    #[inline(always)]
    pub fn cargo_program(&mut self, cargo_program: solana_pubkey::Pubkey) -> &mut Self {
        self.cargo_program = Some(cargo_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// Token Program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.key_index = Some(key_index);
        self
    }
    #[inline(always)]
    pub fn to_sector_index(&mut self, to_sector_index: u16) -> &mut Self {
        self.to_sector_index = Some(to_sector_index);
        self
    }
    #[inline(always)]
    pub fn from_sector_index(&mut self, from_sector_index: u16) -> &mut Self {
        self.from_sector_index = Some(from_sector_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = WarpLane {
            key: self.key.expect("key is not set"),
            owning_profile: self.owning_profile.expect("owning_profile is not set"),
            owning_profile_faction: self
                .owning_profile_faction
                .expect("owning_profile_faction is not set"),
            fleet: self.fleet.expect("fleet is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            game_state: self.game_state.expect("game_state is not set"),
            from_starbase: self.from_starbase.expect("from_starbase is not set"),
            to_starbase: self.to_starbase.expect("to_starbase is not set"),
            from_sector: self.from_sector.expect("from_sector is not set"),
            to_sector: self.to_sector.expect("to_sector is not set"),
            fuel_tank: self.fuel_tank.expect("fuel_tank is not set"),
            cargo_type: self.cargo_type.expect("cargo_type is not set"),
            stats_definition: self.stats_definition.expect("stats_definition is not set"),
            fuel_token_from: self.fuel_token_from.expect("fuel_token_from is not set"),
            fuel_mint: self.fuel_mint.expect("fuel_mint is not set"),
            fee_token_from: self.fee_token_from.expect("fee_token_from is not set"),
            fee_token_to: self.fee_token_to.expect("fee_token_to is not set"),
            fee_mint: self.fee_mint.expect("fee_mint is not set"),
            cargo_program: self.cargo_program.expect("cargo_program is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = WarpLaneInstructionArgs {
            key_index: self.key_index.clone().expect("key_index is not set"),
            to_sector_index: self
                .to_sector_index
                .clone()
                .expect("to_sector_index is not set"),
            from_sector_index: self
                .from_sector_index
                .clone()
                .expect("from_sector_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `warp_lane` CPI accounts.
pub struct WarpLaneCpiAccounts<'a, 'b> {
    /// The key on the profile.
    pub key: &'b solana_account_info::AccountInfo<'a>,
    /// The profile that owns the fleet.
    pub owning_profile: &'b solana_account_info::AccountInfo<'a>,
    /// The faction that the profile belongs to.
    pub owning_profile_faction: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet.
    pub fleet: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub from_starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub to_starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The Sector account representing the fleet`s  current sector
    pub from_sector: &'b solana_account_info::AccountInfo<'a>,
    /// The Sector account that `Fleet` will move to
    pub to_sector: &'b solana_account_info::AccountInfo<'a>,
    /// The fuel tank cargo pod
    pub fuel_tank: &'b solana_account_info::AccountInfo<'a>,
    /// The `Cargo Type` Account
    pub cargo_type: &'b solana_account_info::AccountInfo<'a>,
    /// The `CargoStatsDefinition` for the cargo type
    pub stats_definition: &'b solana_account_info::AccountInfo<'a>,
    /// The fuel source token account - owned by the `fuel_tank`
    pub fuel_token_from: &'b solana_account_info::AccountInfo<'a>,
    /// Token Mint - The fuel mint
    pub fuel_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The fee source token account
    pub fee_token_from: &'b solana_account_info::AccountInfo<'a>,
    /// The fee destination token account
    pub fee_token_to: &'b solana_account_info::AccountInfo<'a>,
    /// Fee Token Mint
    pub fee_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The Cargo Program
    pub cargo_program: &'b solana_account_info::AccountInfo<'a>,
    /// Token Program
    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `warp_lane` CPI instruction.
pub struct WarpLaneCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The key on the profile.
    pub key: &'b solana_account_info::AccountInfo<'a>,
    /// The profile that owns the fleet.
    pub owning_profile: &'b solana_account_info::AccountInfo<'a>,
    /// The faction that the profile belongs to.
    pub owning_profile_faction: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet.
    pub fleet: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub from_starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub to_starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The Sector account representing the fleet`s  current sector
    pub from_sector: &'b solana_account_info::AccountInfo<'a>,
    /// The Sector account that `Fleet` will move to
    pub to_sector: &'b solana_account_info::AccountInfo<'a>,
    /// The fuel tank cargo pod
    pub fuel_tank: &'b solana_account_info::AccountInfo<'a>,
    /// The `Cargo Type` Account
    pub cargo_type: &'b solana_account_info::AccountInfo<'a>,
    /// The `CargoStatsDefinition` for the cargo type
    pub stats_definition: &'b solana_account_info::AccountInfo<'a>,
    /// The fuel source token account - owned by the `fuel_tank`
    pub fuel_token_from: &'b solana_account_info::AccountInfo<'a>,
    /// Token Mint - The fuel mint
    pub fuel_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The fee source token account
    pub fee_token_from: &'b solana_account_info::AccountInfo<'a>,
    /// The fee destination token account
    pub fee_token_to: &'b solana_account_info::AccountInfo<'a>,
    /// Fee Token Mint
    pub fee_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The Cargo Program
    pub cargo_program: &'b solana_account_info::AccountInfo<'a>,
    /// Token Program
    pub token_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: WarpLaneInstructionArgs,
}

impl<'a, 'b> WarpLaneCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: WarpLaneCpiAccounts<'a, 'b>,
        args: WarpLaneInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            key: accounts.key,
            owning_profile: accounts.owning_profile,
            owning_profile_faction: accounts.owning_profile_faction,
            fleet: accounts.fleet,
            game_id: accounts.game_id,
            game_state: accounts.game_state,
            from_starbase: accounts.from_starbase,
            to_starbase: accounts.to_starbase,
            from_sector: accounts.from_sector,
            to_sector: accounts.to_sector,
            fuel_tank: accounts.fuel_tank,
            cargo_type: accounts.cargo_type,
            stats_definition: accounts.stats_definition,
            fuel_token_from: accounts.fuel_token_from,
            fuel_mint: accounts.fuel_mint,
            fee_token_from: accounts.fee_token_from,
            fee_token_to: accounts.fee_token_to,
            fee_mint: accounts.fee_mint,
            cargo_program: accounts.cargo_program,
            token_program: accounts.token_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owning_profile.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owning_profile_faction.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.fleet.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.from_starbase.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.to_starbase.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.from_sector.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.to_sector.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.fuel_tank.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.cargo_type.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.stats_definition.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.fuel_token_from.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.fuel_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.fee_token_from.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.fee_token_to.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.fee_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.cargo_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&WarpLaneInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(21 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.owning_profile.clone());
        account_infos.push(self.owning_profile_faction.clone());
        account_infos.push(self.fleet.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.game_state.clone());
        account_infos.push(self.from_starbase.clone());
        account_infos.push(self.to_starbase.clone());
        account_infos.push(self.from_sector.clone());
        account_infos.push(self.to_sector.clone());
        account_infos.push(self.fuel_tank.clone());
        account_infos.push(self.cargo_type.clone());
        account_infos.push(self.stats_definition.clone());
        account_infos.push(self.fuel_token_from.clone());
        account_infos.push(self.fuel_mint.clone());
        account_infos.push(self.fee_token_from.clone());
        account_infos.push(self.fee_token_to.clone());
        account_infos.push(self.fee_mint.clone());
        account_infos.push(self.cargo_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `WarpLane` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` owning_profile
///   2. `[]` owning_profile_faction
///   3. `[writable]` fleet
///   4. `[]` game_id
///   5. `[]` game_state
///   6. `[]` from_starbase
///   7. `[]` to_starbase
///   8. `[]` from_sector
///   9. `[]` to_sector
///   10. `[writable]` fuel_tank
///   11. `[]` cargo_type
///   12. `[]` stats_definition
///   13. `[writable]` fuel_token_from
///   14. `[writable]` fuel_mint
///   15. `[writable]` fee_token_from
///   16. `[writable]` fee_token_to
///   17. `[writable]` fee_mint
///   18. `[]` cargo_program
///   19. `[]` token_program
#[derive(Clone, Debug)]
pub struct WarpLaneCpiBuilder<'a, 'b> {
    instruction: Box<WarpLaneCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> WarpLaneCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(WarpLaneCpiBuilderInstruction {
            __program: program,
            key: None,
            owning_profile: None,
            owning_profile_faction: None,
            fleet: None,
            game_id: None,
            game_state: None,
            from_starbase: None,
            to_starbase: None,
            from_sector: None,
            to_sector: None,
            fuel_tank: None,
            cargo_type: None,
            stats_definition: None,
            fuel_token_from: None,
            fuel_mint: None,
            fee_token_from: None,
            fee_token_to: None,
            fee_mint: None,
            cargo_program: None,
            token_program: None,
            key_index: None,
            to_sector_index: None,
            from_sector_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The key on the profile.
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The profile that owns the fleet.
    #[inline(always)]
    pub fn owning_profile(
        &mut self,
        owning_profile: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.owning_profile = Some(owning_profile);
        self
    }
    /// The faction that the profile belongs to.
    #[inline(always)]
    pub fn owning_profile_faction(
        &mut self,
        owning_profile_faction: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.owning_profile_faction = Some(owning_profile_faction);
        self
    }
    /// The fleet.
    #[inline(always)]
    pub fn fleet(&mut self, fleet: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.fleet = Some(fleet);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(
        &mut self,
        game_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_state = Some(game_state);
        self
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn from_starbase(
        &mut self,
        from_starbase: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.from_starbase = Some(from_starbase);
        self
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn to_starbase(
        &mut self,
        to_starbase: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.to_starbase = Some(to_starbase);
        self
    }
    /// The Sector account representing the fleet`s  current sector
    #[inline(always)]
    pub fn from_sector(
        &mut self,
        from_sector: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.from_sector = Some(from_sector);
        self
    }
    /// The Sector account that `Fleet` will move to
    #[inline(always)]
    pub fn to_sector(&mut self, to_sector: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.to_sector = Some(to_sector);
        self
    }
    /// The fuel tank cargo pod
    #[inline(always)]
    pub fn fuel_tank(&mut self, fuel_tank: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.fuel_tank = Some(fuel_tank);
        self
    }
    /// The `Cargo Type` Account
    #[inline(always)]
    pub fn cargo_type(
        &mut self,
        cargo_type: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_type = Some(cargo_type);
        self
    }
    /// The `CargoStatsDefinition` for the cargo type
    #[inline(always)]
    pub fn stats_definition(
        &mut self,
        stats_definition: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stats_definition = Some(stats_definition);
        self
    }
    /// The fuel source token account - owned by the `fuel_tank`
    #[inline(always)]
    pub fn fuel_token_from(
        &mut self,
        fuel_token_from: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fuel_token_from = Some(fuel_token_from);
        self
    }
    /// Token Mint - The fuel mint
    #[inline(always)]
    pub fn fuel_mint(&mut self, fuel_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.fuel_mint = Some(fuel_mint);
        self
    }
    /// The fee source token account
    #[inline(always)]
    pub fn fee_token_from(
        &mut self,
        fee_token_from: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_token_from = Some(fee_token_from);
        self
    }
    /// The fee destination token account
    #[inline(always)]
    pub fn fee_token_to(
        &mut self,
        fee_token_to: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_token_to = Some(fee_token_to);
        self
    }
    /// Fee Token Mint
    #[inline(always)]
    pub fn fee_mint(&mut self, fee_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.fee_mint = Some(fee_mint);
        self
    }
    /// The Cargo Program
    #[inline(always)]
    pub fn cargo_program(
        &mut self,
        cargo_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_program = Some(cargo_program);
        self
    }
    /// Token Program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.instruction.key_index = Some(key_index);
        self
    }
    #[inline(always)]
    pub fn to_sector_index(&mut self, to_sector_index: u16) -> &mut Self {
        self.instruction.to_sector_index = Some(to_sector_index);
        self
    }
    #[inline(always)]
    pub fn from_sector_index(&mut self, from_sector_index: u16) -> &mut Self {
        self.instruction.from_sector_index = Some(from_sector_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = WarpLaneInstructionArgs {
            key_index: self
                .instruction
                .key_index
                .clone()
                .expect("key_index is not set"),
            to_sector_index: self
                .instruction
                .to_sector_index
                .clone()
                .expect("to_sector_index is not set"),
            from_sector_index: self
                .instruction
                .from_sector_index
                .clone()
                .expect("from_sector_index is not set"),
        };
        let instruction = WarpLaneCpi {
            __program: self.instruction.__program,

            key: self.instruction.key.expect("key is not set"),

            owning_profile: self
                .instruction
                .owning_profile
                .expect("owning_profile is not set"),

            owning_profile_faction: self
                .instruction
                .owning_profile_faction
                .expect("owning_profile_faction is not set"),

            fleet: self.instruction.fleet.expect("fleet is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            game_state: self.instruction.game_state.expect("game_state is not set"),

            from_starbase: self
                .instruction
                .from_starbase
                .expect("from_starbase is not set"),

            to_starbase: self
                .instruction
                .to_starbase
                .expect("to_starbase is not set"),

            from_sector: self
                .instruction
                .from_sector
                .expect("from_sector is not set"),

            to_sector: self.instruction.to_sector.expect("to_sector is not set"),

            fuel_tank: self.instruction.fuel_tank.expect("fuel_tank is not set"),

            cargo_type: self.instruction.cargo_type.expect("cargo_type is not set"),

            stats_definition: self
                .instruction
                .stats_definition
                .expect("stats_definition is not set"),

            fuel_token_from: self
                .instruction
                .fuel_token_from
                .expect("fuel_token_from is not set"),

            fuel_mint: self.instruction.fuel_mint.expect("fuel_mint is not set"),

            fee_token_from: self
                .instruction
                .fee_token_from
                .expect("fee_token_from is not set"),

            fee_token_to: self
                .instruction
                .fee_token_to
                .expect("fee_token_to is not set"),

            fee_mint: self.instruction.fee_mint.expect("fee_mint is not set"),

            cargo_program: self
                .instruction
                .cargo_program
                .expect("cargo_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct WarpLaneCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    key: Option<&'b solana_account_info::AccountInfo<'a>>,
    owning_profile: Option<&'b solana_account_info::AccountInfo<'a>>,
    owning_profile_faction: Option<&'b solana_account_info::AccountInfo<'a>>,
    fleet: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    from_starbase: Option<&'b solana_account_info::AccountInfo<'a>>,
    to_starbase: Option<&'b solana_account_info::AccountInfo<'a>>,
    from_sector: Option<&'b solana_account_info::AccountInfo<'a>>,
    to_sector: Option<&'b solana_account_info::AccountInfo<'a>>,
    fuel_tank: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_type: Option<&'b solana_account_info::AccountInfo<'a>>,
    stats_definition: Option<&'b solana_account_info::AccountInfo<'a>>,
    fuel_token_from: Option<&'b solana_account_info::AccountInfo<'a>>,
    fuel_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_token_from: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_token_to: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    key_index: Option<u16>,
    to_sector_index: Option<u16>,
    from_sector_index: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
