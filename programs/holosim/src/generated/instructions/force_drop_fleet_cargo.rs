//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct ForceDropFleetCargo {
    /// The `Fleet` Account
    pub fleet: solana_program::pubkey::Pubkey,
    /// The [`FleetShips`] account
    pub fleet_ships: solana_program::pubkey::Pubkey,
    /// The origin cargo pod
    pub cargo_pod: solana_program::pubkey::Pubkey,
    /// The `cargo_type` for the token
    pub cargo_type: solana_program::pubkey::Pubkey,
    /// The cargo stats definition
    pub cargo_stats_definition: solana_program::pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_program::pubkey::Pubkey,
    /// The source token account - owned by the `cargo_pod`
    pub token_from: solana_program::pubkey::Pubkey,
    /// The mint of the token account
    pub token_mint: solana_program::pubkey::Pubkey,
    /// The Cargo Program
    pub cargo_program: solana_program::pubkey::Pubkey,
    /// Token Program
    pub token_program: solana_program::pubkey::Pubkey,
}

impl ForceDropFleetCargo {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fleet, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fleet_ships,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cargo_pod,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cargo_type,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cargo_stats_definition,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_from,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cargo_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ForceDropFleetCargoInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ForceDropFleetCargoInstructionData {
    discriminator: [u8; 8],
}

impl ForceDropFleetCargoInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [170, 120, 191, 46, 255, 195, 80, 221],
        }
    }
}

impl Default for ForceDropFleetCargoInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `ForceDropFleetCargo`.
///
/// ### Accounts:
///
///   0. `[writable]` fleet
///   1. `[writable]` fleet_ships
///   2. `[writable]` cargo_pod
///   3. `[]` cargo_type
///   4. `[]` cargo_stats_definition
///   5. `[]` game_id
///   6. `[writable]` token_from
///   7. `[writable]` token_mint
///   8. `[]` cargo_program
///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct ForceDropFleetCargoBuilder {
    fleet: Option<solana_program::pubkey::Pubkey>,
    fleet_ships: Option<solana_program::pubkey::Pubkey>,
    cargo_pod: Option<solana_program::pubkey::Pubkey>,
    cargo_type: Option<solana_program::pubkey::Pubkey>,
    cargo_stats_definition: Option<solana_program::pubkey::Pubkey>,
    game_id: Option<solana_program::pubkey::Pubkey>,
    token_from: Option<solana_program::pubkey::Pubkey>,
    token_mint: Option<solana_program::pubkey::Pubkey>,
    cargo_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ForceDropFleetCargoBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The `Fleet` Account
    #[inline(always)]
    pub fn fleet(&mut self, fleet: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fleet = Some(fleet);
        self
    }
    /// The [`FleetShips`] account
    #[inline(always)]
    pub fn fleet_ships(&mut self, fleet_ships: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fleet_ships = Some(fleet_ships);
        self
    }
    /// The origin cargo pod
    #[inline(always)]
    pub fn cargo_pod(&mut self, cargo_pod: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cargo_pod = Some(cargo_pod);
        self
    }
    /// The `cargo_type` for the token
    #[inline(always)]
    pub fn cargo_type(&mut self, cargo_type: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cargo_type = Some(cargo_type);
        self
    }
    /// The cargo stats definition
    #[inline(always)]
    pub fn cargo_stats_definition(
        &mut self,
        cargo_stats_definition: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cargo_stats_definition = Some(cargo_stats_definition);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The source token account - owned by the `cargo_pod`
    #[inline(always)]
    pub fn token_from(&mut self, token_from: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_from = Some(token_from);
        self
    }
    /// The mint of the token account
    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }
    /// The Cargo Program
    #[inline(always)]
    pub fn cargo_program(&mut self, cargo_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cargo_program = Some(cargo_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// Token Program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ForceDropFleetCargo {
            fleet: self.fleet.expect("fleet is not set"),
            fleet_ships: self.fleet_ships.expect("fleet_ships is not set"),
            cargo_pod: self.cargo_pod.expect("cargo_pod is not set"),
            cargo_type: self.cargo_type.expect("cargo_type is not set"),
            cargo_stats_definition: self
                .cargo_stats_definition
                .expect("cargo_stats_definition is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            token_from: self.token_from.expect("token_from is not set"),
            token_mint: self.token_mint.expect("token_mint is not set"),
            cargo_program: self.cargo_program.expect("cargo_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `force_drop_fleet_cargo` CPI accounts.
pub struct ForceDropFleetCargoCpiAccounts<'a, 'b> {
    /// The `Fleet` Account
    pub fleet: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`FleetShips`] account
    pub fleet_ships: &'b solana_program::account_info::AccountInfo<'a>,
    /// The origin cargo pod
    pub cargo_pod: &'b solana_program::account_info::AccountInfo<'a>,
    /// The `cargo_type` for the token
    pub cargo_type: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo stats definition
    pub cargo_stats_definition: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The source token account - owned by the `cargo_pod`
    pub token_from: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of the token account
    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Cargo Program
    pub cargo_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token Program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `force_drop_fleet_cargo` CPI instruction.
pub struct ForceDropFleetCargoCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The `Fleet` Account
    pub fleet: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`FleetShips`] account
    pub fleet_ships: &'b solana_program::account_info::AccountInfo<'a>,
    /// The origin cargo pod
    pub cargo_pod: &'b solana_program::account_info::AccountInfo<'a>,
    /// The `cargo_type` for the token
    pub cargo_type: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo stats definition
    pub cargo_stats_definition: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The source token account - owned by the `cargo_pod`
    pub token_from: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of the token account
    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Cargo Program
    pub cargo_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token Program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> ForceDropFleetCargoCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ForceDropFleetCargoCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            fleet: accounts.fleet,
            fleet_ships: accounts.fleet_ships,
            cargo_pod: accounts.cargo_pod,
            cargo_type: accounts.cargo_type,
            cargo_stats_definition: accounts.cargo_stats_definition,
            game_id: accounts.game_id,
            token_from: accounts.token_from,
            token_mint: accounts.token_mint,
            cargo_program: accounts.cargo_program,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fleet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fleet_ships.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cargo_pod.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cargo_type.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cargo_stats_definition.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_from.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cargo_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ForceDropFleetCargoInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.fleet.clone());
        account_infos.push(self.fleet_ships.clone());
        account_infos.push(self.cargo_pod.clone());
        account_infos.push(self.cargo_type.clone());
        account_infos.push(self.cargo_stats_definition.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.token_from.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.cargo_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ForceDropFleetCargo` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` fleet
///   1. `[writable]` fleet_ships
///   2. `[writable]` cargo_pod
///   3. `[]` cargo_type
///   4. `[]` cargo_stats_definition
///   5. `[]` game_id
///   6. `[writable]` token_from
///   7. `[writable]` token_mint
///   8. `[]` cargo_program
///   9. `[]` token_program
#[derive(Clone, Debug)]
pub struct ForceDropFleetCargoCpiBuilder<'a, 'b> {
    instruction: Box<ForceDropFleetCargoCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ForceDropFleetCargoCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ForceDropFleetCargoCpiBuilderInstruction {
            __program: program,
            fleet: None,
            fleet_ships: None,
            cargo_pod: None,
            cargo_type: None,
            cargo_stats_definition: None,
            game_id: None,
            token_from: None,
            token_mint: None,
            cargo_program: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The `Fleet` Account
    #[inline(always)]
    pub fn fleet(&mut self, fleet: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.fleet = Some(fleet);
        self
    }
    /// The [`FleetShips`] account
    #[inline(always)]
    pub fn fleet_ships(
        &mut self,
        fleet_ships: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fleet_ships = Some(fleet_ships);
        self
    }
    /// The origin cargo pod
    #[inline(always)]
    pub fn cargo_pod(
        &mut self,
        cargo_pod: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_pod = Some(cargo_pod);
        self
    }
    /// The `cargo_type` for the token
    #[inline(always)]
    pub fn cargo_type(
        &mut self,
        cargo_type: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_type = Some(cargo_type);
        self
    }
    /// The cargo stats definition
    #[inline(always)]
    pub fn cargo_stats_definition(
        &mut self,
        cargo_stats_definition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_stats_definition = Some(cargo_stats_definition);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(
        &mut self,
        game_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The source token account - owned by the `cargo_pod`
    #[inline(always)]
    pub fn token_from(
        &mut self,
        token_from: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_from = Some(token_from);
        self
    }
    /// The mint of the token account
    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }
    /// The Cargo Program
    #[inline(always)]
    pub fn cargo_program(
        &mut self,
        cargo_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_program = Some(cargo_program);
        self
    }
    /// Token Program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = ForceDropFleetCargoCpi {
            __program: self.instruction.__program,

            fleet: self.instruction.fleet.expect("fleet is not set"),

            fleet_ships: self
                .instruction
                .fleet_ships
                .expect("fleet_ships is not set"),

            cargo_pod: self.instruction.cargo_pod.expect("cargo_pod is not set"),

            cargo_type: self.instruction.cargo_type.expect("cargo_type is not set"),

            cargo_stats_definition: self
                .instruction
                .cargo_stats_definition
                .expect("cargo_stats_definition is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            token_from: self.instruction.token_from.expect("token_from is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            cargo_program: self
                .instruction
                .cargo_program
                .expect("cargo_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ForceDropFleetCargoCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    fleet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fleet_ships: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_pod: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_type: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_stats_definition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_from: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
