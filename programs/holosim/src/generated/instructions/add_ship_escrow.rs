//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct AddShipEscrow {
    /// The funder - pays for account rent
    pub funder: solana_program::pubkey::Pubkey,
    /// The [`SagePlayerProfile`] account
    pub sage_player_profile: solana_program::pubkey::Pubkey,
    /// The Origin Token Account
    pub origin_token_account: solana_program::pubkey::Pubkey,
    /// The [`Ship`] Account
    pub ship: solana_program::pubkey::Pubkey,
    /// The Escrow Token Account
    pub ship_escrow_token_account: solana_program::pubkey::Pubkey,
    /// The [`Starbase`] account
    pub starbase: solana_program::pubkey::Pubkey,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: solana_program::pubkey::Pubkey,
    /// The key authorized for this instruction
    pub key: solana_program::pubkey::Pubkey,
    /// The [`Profile`] account
    pub profile: solana_program::pubkey::Pubkey,
    /// The faction that the profile belongs to.
    pub profile_faction: solana_program::pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_program::pubkey::Pubkey,
    /// The [`GameState`] account
    pub game_state: solana_program::pubkey::Pubkey,
    /// The Token Program
    pub token_program: solana_program::pubkey::Pubkey,
    /// The Solana System program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl AddShipEscrow {
    pub fn instruction(
        &self,
        args: AddShipEscrowInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AddShipEscrowInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.funder,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.sage_player_profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.origin_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ship, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.ship_escrow_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.starbase,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.starbase_player,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.profile_faction,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&AddShipEscrowInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddShipEscrowInstructionData {
    discriminator: [u8; 8],
}

impl AddShipEscrowInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [186, 19, 218, 150, 167, 181, 212, 89],
        }
    }
}

impl Default for AddShipEscrowInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddShipEscrowInstructionArgs {
    pub ship_amount: u64,
    pub index: Option<u32>,
}

/// Instruction builder for `AddShipEscrow`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funder
///   1. `[writable]` sage_player_profile
///   2. `[writable]` origin_token_account
///   3. `[]` ship
///   4. `[writable]` ship_escrow_token_account
///   5. `[]` starbase
///   6. `[writable]` starbase_player
///   7. `[signer]` key
///   8. `[]` profile
///   9. `[]` profile_faction
///   10. `[]` game_id
///   11. `[]` game_state
///   12. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct AddShipEscrowBuilder {
    funder: Option<solana_program::pubkey::Pubkey>,
    sage_player_profile: Option<solana_program::pubkey::Pubkey>,
    origin_token_account: Option<solana_program::pubkey::Pubkey>,
    ship: Option<solana_program::pubkey::Pubkey>,
    ship_escrow_token_account: Option<solana_program::pubkey::Pubkey>,
    starbase: Option<solana_program::pubkey::Pubkey>,
    starbase_player: Option<solana_program::pubkey::Pubkey>,
    key: Option<solana_program::pubkey::Pubkey>,
    profile: Option<solana_program::pubkey::Pubkey>,
    profile_faction: Option<solana_program::pubkey::Pubkey>,
    game_id: Option<solana_program::pubkey::Pubkey>,
    game_state: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    ship_amount: Option<u64>,
    index: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AddShipEscrowBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The funder - pays for account rent
    #[inline(always)]
    pub fn funder(&mut self, funder: solana_program::pubkey::Pubkey) -> &mut Self {
        self.funder = Some(funder);
        self
    }
    /// The [`SagePlayerProfile`] account
    #[inline(always)]
    pub fn sage_player_profile(
        &mut self,
        sage_player_profile: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sage_player_profile = Some(sage_player_profile);
        self
    }
    /// The Origin Token Account
    #[inline(always)]
    pub fn origin_token_account(
        &mut self,
        origin_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.origin_token_account = Some(origin_token_account);
        self
    }
    /// The [`Ship`] Account
    #[inline(always)]
    pub fn ship(&mut self, ship: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ship = Some(ship);
        self
    }
    /// The Escrow Token Account
    #[inline(always)]
    pub fn ship_escrow_token_account(
        &mut self,
        ship_escrow_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ship_escrow_token_account = Some(ship_escrow_token_account);
        self
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(&mut self, starbase: solana_program::pubkey::Pubkey) -> &mut Self {
        self.starbase = Some(starbase);
        self
    }
    /// The [`StarbasePlayer`] Account
    #[inline(always)]
    pub fn starbase_player(
        &mut self,
        starbase_player: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.starbase_player = Some(starbase_player);
        self
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: solana_program::pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_program::pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// The faction that the profile belongs to.
    #[inline(always)]
    pub fn profile_faction(
        &mut self,
        profile_faction: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.profile_faction = Some(profile_faction);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(&mut self, game_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_state = Some(game_state);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// The Token Program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The Solana System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn ship_amount(&mut self, ship_amount: u64) -> &mut Self {
        self.ship_amount = Some(ship_amount);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn index(&mut self, index: u32) -> &mut Self {
        self.index = Some(index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AddShipEscrow {
            funder: self.funder.expect("funder is not set"),
            sage_player_profile: self
                .sage_player_profile
                .expect("sage_player_profile is not set"),
            origin_token_account: self
                .origin_token_account
                .expect("origin_token_account is not set"),
            ship: self.ship.expect("ship is not set"),
            ship_escrow_token_account: self
                .ship_escrow_token_account
                .expect("ship_escrow_token_account is not set"),
            starbase: self.starbase.expect("starbase is not set"),
            starbase_player: self.starbase_player.expect("starbase_player is not set"),
            key: self.key.expect("key is not set"),
            profile: self.profile.expect("profile is not set"),
            profile_faction: self.profile_faction.expect("profile_faction is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            game_state: self.game_state.expect("game_state is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = AddShipEscrowInstructionArgs {
            ship_amount: self.ship_amount.clone().expect("ship_amount is not set"),
            index: self.index.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `add_ship_escrow` CPI accounts.
pub struct AddShipEscrowCpiAccounts<'a, 'b> {
    /// The funder - pays for account rent
    pub funder: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`SagePlayerProfile`] account
    pub sage_player_profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Origin Token Account
    pub origin_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Ship`] Account
    pub ship: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Escrow Token Account
    pub ship_escrow_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub starbase: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: &'b solana_program::account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The faction that the profile belongs to.
    pub profile_faction: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Token Program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Solana System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `add_ship_escrow` CPI instruction.
pub struct AddShipEscrowCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The funder - pays for account rent
    pub funder: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`SagePlayerProfile`] account
    pub sage_player_profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Origin Token Account
    pub origin_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Ship`] Account
    pub ship: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Escrow Token Account
    pub ship_escrow_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub starbase: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: &'b solana_program::account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The faction that the profile belongs to.
    pub profile_faction: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Token Program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Solana System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AddShipEscrowInstructionArgs,
}

impl<'a, 'b> AddShipEscrowCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AddShipEscrowCpiAccounts<'a, 'b>,
        args: AddShipEscrowInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            funder: accounts.funder,
            sage_player_profile: accounts.sage_player_profile,
            origin_token_account: accounts.origin_token_account,
            ship: accounts.ship,
            ship_escrow_token_account: accounts.ship_escrow_token_account,
            starbase: accounts.starbase,
            starbase_player: accounts.starbase_player,
            key: accounts.key,
            profile: accounts.profile,
            profile_faction: accounts.profile_faction,
            game_id: accounts.game_id,
            game_state: accounts.game_state,
            token_program: accounts.token_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.funder.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.sage_player_profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.origin_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ship.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ship_escrow_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.starbase.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.starbase_player.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.profile_faction.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&AddShipEscrowInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(15 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.funder.clone());
        account_infos.push(self.sage_player_profile.clone());
        account_infos.push(self.origin_token_account.clone());
        account_infos.push(self.ship.clone());
        account_infos.push(self.ship_escrow_token_account.clone());
        account_infos.push(self.starbase.clone());
        account_infos.push(self.starbase_player.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.profile_faction.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.game_state.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AddShipEscrow` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funder
///   1. `[writable]` sage_player_profile
///   2. `[writable]` origin_token_account
///   3. `[]` ship
///   4. `[writable]` ship_escrow_token_account
///   5. `[]` starbase
///   6. `[writable]` starbase_player
///   7. `[signer]` key
///   8. `[]` profile
///   9. `[]` profile_faction
///   10. `[]` game_id
///   11. `[]` game_state
///   12. `[]` token_program
///   13. `[]` system_program
#[derive(Clone, Debug)]
pub struct AddShipEscrowCpiBuilder<'a, 'b> {
    instruction: Box<AddShipEscrowCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AddShipEscrowCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AddShipEscrowCpiBuilderInstruction {
            __program: program,
            funder: None,
            sage_player_profile: None,
            origin_token_account: None,
            ship: None,
            ship_escrow_token_account: None,
            starbase: None,
            starbase_player: None,
            key: None,
            profile: None,
            profile_faction: None,
            game_id: None,
            game_state: None,
            token_program: None,
            system_program: None,
            ship_amount: None,
            index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The funder - pays for account rent
    #[inline(always)]
    pub fn funder(
        &mut self,
        funder: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.funder = Some(funder);
        self
    }
    /// The [`SagePlayerProfile`] account
    #[inline(always)]
    pub fn sage_player_profile(
        &mut self,
        sage_player_profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sage_player_profile = Some(sage_player_profile);
        self
    }
    /// The Origin Token Account
    #[inline(always)]
    pub fn origin_token_account(
        &mut self,
        origin_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.origin_token_account = Some(origin_token_account);
        self
    }
    /// The [`Ship`] Account
    #[inline(always)]
    pub fn ship(&mut self, ship: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.ship = Some(ship);
        self
    }
    /// The Escrow Token Account
    #[inline(always)]
    pub fn ship_escrow_token_account(
        &mut self,
        ship_escrow_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ship_escrow_token_account = Some(ship_escrow_token_account);
        self
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(
        &mut self,
        starbase: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.starbase = Some(starbase);
        self
    }
    /// The [`StarbasePlayer`] Account
    #[inline(always)]
    pub fn starbase_player(
        &mut self,
        starbase_player: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.starbase_player = Some(starbase_player);
        self
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(
        &mut self,
        profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The faction that the profile belongs to.
    #[inline(always)]
    pub fn profile_faction(
        &mut self,
        profile_faction: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.profile_faction = Some(profile_faction);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(
        &mut self,
        game_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(
        &mut self,
        game_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_state = Some(game_state);
        self
    }
    /// The Token Program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// The Solana System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn ship_amount(&mut self, ship_amount: u64) -> &mut Self {
        self.instruction.ship_amount = Some(ship_amount);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn index(&mut self, index: u32) -> &mut Self {
        self.instruction.index = Some(index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = AddShipEscrowInstructionArgs {
            ship_amount: self
                .instruction
                .ship_amount
                .clone()
                .expect("ship_amount is not set"),
            index: self.instruction.index.clone(),
        };
        let instruction = AddShipEscrowCpi {
            __program: self.instruction.__program,

            funder: self.instruction.funder.expect("funder is not set"),

            sage_player_profile: self
                .instruction
                .sage_player_profile
                .expect("sage_player_profile is not set"),

            origin_token_account: self
                .instruction
                .origin_token_account
                .expect("origin_token_account is not set"),

            ship: self.instruction.ship.expect("ship is not set"),

            ship_escrow_token_account: self
                .instruction
                .ship_escrow_token_account
                .expect("ship_escrow_token_account is not set"),

            starbase: self.instruction.starbase.expect("starbase is not set"),

            starbase_player: self
                .instruction
                .starbase_player
                .expect("starbase_player is not set"),

            key: self.instruction.key.expect("key is not set"),

            profile: self.instruction.profile.expect("profile is not set"),

            profile_faction: self
                .instruction
                .profile_faction
                .expect("profile_faction is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            game_state: self.instruction.game_state.expect("game_state is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AddShipEscrowCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    funder: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sage_player_profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    origin_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ship: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ship_escrow_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    starbase: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    starbase_player: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    key: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    profile_faction: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ship_amount: Option<u64>,
    index: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
