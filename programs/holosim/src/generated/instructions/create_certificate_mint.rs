//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const CREATE_CERTIFICATE_MINT_DISCRIMINATOR: [u8; 8] = [173, 190, 45, 116, 34, 109, 34, 89];

/// Accounts.
#[derive(Debug)]
pub struct CreateCertificateMint {
    /// The funder for the new crafting process
    pub funder: solana_pubkey::Pubkey,
    /// The Starbase to create a certificate mint for
    pub starbase: solana_pubkey::Pubkey,
    /// The mint to create a certificate mint for
    pub cargo_mint: solana_pubkey::Pubkey,
    /// The new certificate mint
    pub certificate_mint: solana_pubkey::Pubkey,
    /// The cargo type to associate with the `cargo_mint`
    /// Included to ensure that this instruction can only be called for valid cargo types
    pub cargo_type: solana_pubkey::Pubkey,
    /// The game account
    pub game_id: solana_pubkey::Pubkey,
    /// The transfer hook extra accounts list
    pub transfer_hook_extra_account_meta_list: solana_pubkey::Pubkey,
    /// The transfer hook program
    pub transfer_hook_program: solana_pubkey::Pubkey,
    /// The token 2022 program
    pub token2022_program: solana_pubkey::Pubkey,
    /// The system program
    pub system_program: solana_pubkey::Pubkey,
}

impl CreateCertificateMint {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.funder, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.starbase,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.cargo_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.certificate_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.cargo_type,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.transfer_hook_extra_account_meta_list,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.transfer_hook_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token2022_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&CreateCertificateMintInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateCertificateMintInstructionData {
    discriminator: [u8; 8],
}

impl CreateCertificateMintInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [173, 190, 45, 116, 34, 109, 34, 89],
        }
    }
}

impl Default for CreateCertificateMintInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `CreateCertificateMint`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funder
///   1. `[]` starbase
///   2. `[]` cargo_mint
///   3. `[writable]` certificate_mint
///   4. `[]` cargo_type
///   5. `[]` game_id
///   6. `[writable]` transfer_hook_extra_account_meta_list
///   7. `[]` transfer_hook_program
///   8. `[]` token2022_program
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateCertificateMintBuilder {
    funder: Option<solana_pubkey::Pubkey>,
    starbase: Option<solana_pubkey::Pubkey>,
    cargo_mint: Option<solana_pubkey::Pubkey>,
    certificate_mint: Option<solana_pubkey::Pubkey>,
    cargo_type: Option<solana_pubkey::Pubkey>,
    game_id: Option<solana_pubkey::Pubkey>,
    transfer_hook_extra_account_meta_list: Option<solana_pubkey::Pubkey>,
    transfer_hook_program: Option<solana_pubkey::Pubkey>,
    token2022_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateCertificateMintBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The funder for the new crafting process
    #[inline(always)]
    pub fn funder(&mut self, funder: solana_pubkey::Pubkey) -> &mut Self {
        self.funder = Some(funder);
        self
    }
    /// The Starbase to create a certificate mint for
    #[inline(always)]
    pub fn starbase(&mut self, starbase: solana_pubkey::Pubkey) -> &mut Self {
        self.starbase = Some(starbase);
        self
    }
    /// The mint to create a certificate mint for
    #[inline(always)]
    pub fn cargo_mint(&mut self, cargo_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.cargo_mint = Some(cargo_mint);
        self
    }
    /// The new certificate mint
    #[inline(always)]
    pub fn certificate_mint(&mut self, certificate_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.certificate_mint = Some(certificate_mint);
        self
    }
    /// The cargo type to associate with the `cargo_mint`
    /// Included to ensure that this instruction can only be called for valid cargo types
    #[inline(always)]
    pub fn cargo_type(&mut self, cargo_type: solana_pubkey::Pubkey) -> &mut Self {
        self.cargo_type = Some(cargo_type);
        self
    }
    /// The game account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The transfer hook extra accounts list
    #[inline(always)]
    pub fn transfer_hook_extra_account_meta_list(
        &mut self,
        transfer_hook_extra_account_meta_list: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.transfer_hook_extra_account_meta_list = Some(transfer_hook_extra_account_meta_list);
        self
    }
    /// The transfer hook program
    #[inline(always)]
    pub fn transfer_hook_program(
        &mut self,
        transfer_hook_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.transfer_hook_program = Some(transfer_hook_program);
        self
    }
    /// The token 2022 program
    #[inline(always)]
    pub fn token2022_program(&mut self, token2022_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token2022_program = Some(token2022_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The system program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CreateCertificateMint {
            funder: self.funder.expect("funder is not set"),
            starbase: self.starbase.expect("starbase is not set"),
            cargo_mint: self.cargo_mint.expect("cargo_mint is not set"),
            certificate_mint: self.certificate_mint.expect("certificate_mint is not set"),
            cargo_type: self.cargo_type.expect("cargo_type is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            transfer_hook_extra_account_meta_list: self
                .transfer_hook_extra_account_meta_list
                .expect("transfer_hook_extra_account_meta_list is not set"),
            transfer_hook_program: self
                .transfer_hook_program
                .expect("transfer_hook_program is not set"),
            token2022_program: self
                .token2022_program
                .expect("token2022_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `create_certificate_mint` CPI accounts.
pub struct CreateCertificateMintCpiAccounts<'a, 'b> {
    /// The funder for the new crafting process
    pub funder: &'b solana_account_info::AccountInfo<'a>,
    /// The Starbase to create a certificate mint for
    pub starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The mint to create a certificate mint for
    pub cargo_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The new certificate mint
    pub certificate_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo type to associate with the `cargo_mint`
    /// Included to ensure that this instruction can only be called for valid cargo types
    pub cargo_type: &'b solana_account_info::AccountInfo<'a>,
    /// The game account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The transfer hook extra accounts list
    pub transfer_hook_extra_account_meta_list: &'b solana_account_info::AccountInfo<'a>,
    /// The transfer hook program
    pub transfer_hook_program: &'b solana_account_info::AccountInfo<'a>,
    /// The token 2022 program
    pub token2022_program: &'b solana_account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `create_certificate_mint` CPI instruction.
pub struct CreateCertificateMintCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The funder for the new crafting process
    pub funder: &'b solana_account_info::AccountInfo<'a>,
    /// The Starbase to create a certificate mint for
    pub starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The mint to create a certificate mint for
    pub cargo_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The new certificate mint
    pub certificate_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo type to associate with the `cargo_mint`
    /// Included to ensure that this instruction can only be called for valid cargo types
    pub cargo_type: &'b solana_account_info::AccountInfo<'a>,
    /// The game account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The transfer hook extra accounts list
    pub transfer_hook_extra_account_meta_list: &'b solana_account_info::AccountInfo<'a>,
    /// The transfer hook program
    pub transfer_hook_program: &'b solana_account_info::AccountInfo<'a>,
    /// The token 2022 program
    pub token2022_program: &'b solana_account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> CreateCertificateMintCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CreateCertificateMintCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            funder: accounts.funder,
            starbase: accounts.starbase,
            cargo_mint: accounts.cargo_mint,
            certificate_mint: accounts.certificate_mint,
            cargo_type: accounts.cargo_type,
            game_id: accounts.game_id,
            transfer_hook_extra_account_meta_list: accounts.transfer_hook_extra_account_meta_list,
            transfer_hook_program: accounts.transfer_hook_program,
            token2022_program: accounts.token2022_program,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.funder.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.starbase.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.cargo_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.certificate_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.cargo_type.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.transfer_hook_extra_account_meta_list.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.transfer_hook_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token2022_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&CreateCertificateMintInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.funder.clone());
        account_infos.push(self.starbase.clone());
        account_infos.push(self.cargo_mint.clone());
        account_infos.push(self.certificate_mint.clone());
        account_infos.push(self.cargo_type.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.transfer_hook_extra_account_meta_list.clone());
        account_infos.push(self.transfer_hook_program.clone());
        account_infos.push(self.token2022_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateCertificateMint` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funder
///   1. `[]` starbase
///   2. `[]` cargo_mint
///   3. `[writable]` certificate_mint
///   4. `[]` cargo_type
///   5. `[]` game_id
///   6. `[writable]` transfer_hook_extra_account_meta_list
///   7. `[]` transfer_hook_program
///   8. `[]` token2022_program
///   9. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateCertificateMintCpiBuilder<'a, 'b> {
    instruction: Box<CreateCertificateMintCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateCertificateMintCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateCertificateMintCpiBuilderInstruction {
            __program: program,
            funder: None,
            starbase: None,
            cargo_mint: None,
            certificate_mint: None,
            cargo_type: None,
            game_id: None,
            transfer_hook_extra_account_meta_list: None,
            transfer_hook_program: None,
            token2022_program: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The funder for the new crafting process
    #[inline(always)]
    pub fn funder(&mut self, funder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.funder = Some(funder);
        self
    }
    /// The Starbase to create a certificate mint for
    #[inline(always)]
    pub fn starbase(&mut self, starbase: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.starbase = Some(starbase);
        self
    }
    /// The mint to create a certificate mint for
    #[inline(always)]
    pub fn cargo_mint(
        &mut self,
        cargo_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_mint = Some(cargo_mint);
        self
    }
    /// The new certificate mint
    #[inline(always)]
    pub fn certificate_mint(
        &mut self,
        certificate_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.certificate_mint = Some(certificate_mint);
        self
    }
    /// The cargo type to associate with the `cargo_mint`
    /// Included to ensure that this instruction can only be called for valid cargo types
    #[inline(always)]
    pub fn cargo_type(
        &mut self,
        cargo_type: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_type = Some(cargo_type);
        self
    }
    /// The game account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The transfer hook extra accounts list
    #[inline(always)]
    pub fn transfer_hook_extra_account_meta_list(
        &mut self,
        transfer_hook_extra_account_meta_list: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.transfer_hook_extra_account_meta_list =
            Some(transfer_hook_extra_account_meta_list);
        self
    }
    /// The transfer hook program
    #[inline(always)]
    pub fn transfer_hook_program(
        &mut self,
        transfer_hook_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.transfer_hook_program = Some(transfer_hook_program);
        self
    }
    /// The token 2022 program
    #[inline(always)]
    pub fn token2022_program(
        &mut self,
        token2022_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token2022_program = Some(token2022_program);
        self
    }
    /// The system program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = CreateCertificateMintCpi {
            __program: self.instruction.__program,

            funder: self.instruction.funder.expect("funder is not set"),

            starbase: self.instruction.starbase.expect("starbase is not set"),

            cargo_mint: self.instruction.cargo_mint.expect("cargo_mint is not set"),

            certificate_mint: self
                .instruction
                .certificate_mint
                .expect("certificate_mint is not set"),

            cargo_type: self.instruction.cargo_type.expect("cargo_type is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            transfer_hook_extra_account_meta_list: self
                .instruction
                .transfer_hook_extra_account_meta_list
                .expect("transfer_hook_extra_account_meta_list is not set"),

            transfer_hook_program: self
                .instruction
                .transfer_hook_program
                .expect("transfer_hook_program is not set"),

            token2022_program: self
                .instruction
                .token2022_program
                .expect("token2022_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateCertificateMintCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    funder: Option<&'b solana_account_info::AccountInfo<'a>>,
    starbase: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    certificate_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_type: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_account_info::AccountInfo<'a>>,
    transfer_hook_extra_account_meta_list: Option<&'b solana_account_info::AccountInfo<'a>>,
    transfer_hook_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token2022_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
