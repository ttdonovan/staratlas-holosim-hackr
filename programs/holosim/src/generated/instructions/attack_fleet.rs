//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const ATTACK_FLEET_DISCRIMINATOR: [u8; 8] = [89, 173, 5, 123, 109, 13, 236, 217];

/// Accounts.
#[derive(Debug)]
pub struct AttackFleet {
    /// The key on the profile.
    pub key: solana_pubkey::Pubkey,
    /// The profile that owns the fleet.
    pub owning_profile: solana_pubkey::Pubkey,
    /// The faction that the profile belongs to.
    pub owning_profile_faction: solana_pubkey::Pubkey,
    /// The fleet.
    pub fleet: solana_pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_pubkey::Pubkey,
    /// The fleet being attacked
    pub defending_fleet: solana_pubkey::Pubkey,
    /// The origin cargo pod; owned by the fleet attacking
    pub attacking_cargo_pod: solana_pubkey::Pubkey,
    /// The destination cargo pod; owned by the fleet defending
    pub defending_cargo_pod: solana_pubkey::Pubkey,
    /// The cargo type for ammo
    pub cargo_type: solana_pubkey::Pubkey,
    /// The cargo stats definition account
    pub cargo_stats_definition: solana_pubkey::Pubkey,
    /// The attacker combat XP points account
    pub attacker_combat_xp: solana_pubkey::Pubkey,
    /// The attacker council rank XP points account
    pub attacker_council_rank_xp: solana_pubkey::Pubkey,
    /// The defender combat XP points account
    pub defender_combat_xp: solana_pubkey::Pubkey,
    /// The defender council rank XP points account
    pub defender_council_rank_xp: solana_pubkey::Pubkey,
    /// The Pilot XP Points Category Account
    pub combat_xp_category: solana_pubkey::Pubkey,
    /// The Council Rank XP Points Category Account
    pub council_rank_xp_category: solana_pubkey::Pubkey,
    /// The Pilot XP Modifier Account
    pub combat_xp_modifier: solana_pubkey::Pubkey,
    /// The Pilot XP Modifier Account
    pub council_rank_xp_modifier: solana_pubkey::Pubkey,
    /// The [`ProgressionConfig`] account
    pub progression_config: solana_pubkey::Pubkey,
    /// The [`CombatConfig`] account
    pub combat_config: solana_pubkey::Pubkey,
    /// The attacker's ammo token account - owned by the `attacking_cargo_pod`
    pub attacking_fleet_ammo_token: solana_pubkey::Pubkey,
    /// The defender's ammo token account - owned by the `defending_cargo_pod`
    pub defending_fleet_ammo_token: solana_pubkey::Pubkey,
    /// The ammo token mint
    pub token_mint: solana_pubkey::Pubkey,
}

impl AttackFleet {
    pub fn instruction(&self, args: AttackFleetInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AttackFleetInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(23 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owning_profile,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owning_profile_faction,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.fleet, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.defending_fleet,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.attacking_cargo_pod,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.defending_cargo_pod,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.cargo_type,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.cargo_stats_definition,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.attacker_combat_xp,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.attacker_council_rank_xp,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.defender_combat_xp,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.defender_council_rank_xp,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.combat_xp_category,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.council_rank_xp_category,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.combat_xp_modifier,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.council_rank_xp_modifier,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.progression_config,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.combat_config,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.attacking_fleet_ammo_token,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.defending_fleet_ammo_token,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.token_mint, false));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&AttackFleetInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AttackFleetInstructionData {
    discriminator: [u8; 8],
}

impl AttackFleetInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [89, 173, 5, 123, 109, 13, 236, 217],
        }
    }
}

impl Default for AttackFleetInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AttackFleetInstructionArgs {
    pub key_index: u16,
}

/// Instruction builder for `AttackFleet`.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` owning_profile
///   2. `[]` owning_profile_faction
///   3. `[writable]` fleet
///   4. `[]` game_id
///   5. `[writable]` defending_fleet
///   6. `[writable]` attacking_cargo_pod
///   7. `[writable]` defending_cargo_pod
///   8. `[]` cargo_type
///   9. `[]` cargo_stats_definition
///   10. `[writable]` attacker_combat_xp
///   11. `[writable]` attacker_council_rank_xp
///   12. `[writable]` defender_combat_xp
///   13. `[writable]` defender_council_rank_xp
///   14. `[]` combat_xp_category
///   15. `[]` council_rank_xp_category
///   16. `[]` combat_xp_modifier
///   17. `[]` council_rank_xp_modifier
///   18. `[]` progression_config
///   19. `[]` combat_config
///   20. `[writable]` attacking_fleet_ammo_token
///   21. `[writable]` defending_fleet_ammo_token
///   22. `[writable]` token_mint
#[derive(Clone, Debug, Default)]
pub struct AttackFleetBuilder {
    key: Option<solana_pubkey::Pubkey>,
    owning_profile: Option<solana_pubkey::Pubkey>,
    owning_profile_faction: Option<solana_pubkey::Pubkey>,
    fleet: Option<solana_pubkey::Pubkey>,
    game_id: Option<solana_pubkey::Pubkey>,
    defending_fleet: Option<solana_pubkey::Pubkey>,
    attacking_cargo_pod: Option<solana_pubkey::Pubkey>,
    defending_cargo_pod: Option<solana_pubkey::Pubkey>,
    cargo_type: Option<solana_pubkey::Pubkey>,
    cargo_stats_definition: Option<solana_pubkey::Pubkey>,
    attacker_combat_xp: Option<solana_pubkey::Pubkey>,
    attacker_council_rank_xp: Option<solana_pubkey::Pubkey>,
    defender_combat_xp: Option<solana_pubkey::Pubkey>,
    defender_council_rank_xp: Option<solana_pubkey::Pubkey>,
    combat_xp_category: Option<solana_pubkey::Pubkey>,
    council_rank_xp_category: Option<solana_pubkey::Pubkey>,
    combat_xp_modifier: Option<solana_pubkey::Pubkey>,
    council_rank_xp_modifier: Option<solana_pubkey::Pubkey>,
    progression_config: Option<solana_pubkey::Pubkey>,
    combat_config: Option<solana_pubkey::Pubkey>,
    attacking_fleet_ammo_token: Option<solana_pubkey::Pubkey>,
    defending_fleet_ammo_token: Option<solana_pubkey::Pubkey>,
    token_mint: Option<solana_pubkey::Pubkey>,
    key_index: Option<u16>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl AttackFleetBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The key on the profile.
    #[inline(always)]
    pub fn key(&mut self, key: solana_pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The profile that owns the fleet.
    #[inline(always)]
    pub fn owning_profile(&mut self, owning_profile: solana_pubkey::Pubkey) -> &mut Self {
        self.owning_profile = Some(owning_profile);
        self
    }
    /// The faction that the profile belongs to.
    #[inline(always)]
    pub fn owning_profile_faction(
        &mut self,
        owning_profile_faction: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.owning_profile_faction = Some(owning_profile_faction);
        self
    }
    /// The fleet.
    #[inline(always)]
    pub fn fleet(&mut self, fleet: solana_pubkey::Pubkey) -> &mut Self {
        self.fleet = Some(fleet);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The fleet being attacked
    #[inline(always)]
    pub fn defending_fleet(&mut self, defending_fleet: solana_pubkey::Pubkey) -> &mut Self {
        self.defending_fleet = Some(defending_fleet);
        self
    }
    /// The origin cargo pod; owned by the fleet attacking
    #[inline(always)]
    pub fn attacking_cargo_pod(&mut self, attacking_cargo_pod: solana_pubkey::Pubkey) -> &mut Self {
        self.attacking_cargo_pod = Some(attacking_cargo_pod);
        self
    }
    /// The destination cargo pod; owned by the fleet defending
    #[inline(always)]
    pub fn defending_cargo_pod(&mut self, defending_cargo_pod: solana_pubkey::Pubkey) -> &mut Self {
        self.defending_cargo_pod = Some(defending_cargo_pod);
        self
    }
    /// The cargo type for ammo
    #[inline(always)]
    pub fn cargo_type(&mut self, cargo_type: solana_pubkey::Pubkey) -> &mut Self {
        self.cargo_type = Some(cargo_type);
        self
    }
    /// The cargo stats definition account
    #[inline(always)]
    pub fn cargo_stats_definition(
        &mut self,
        cargo_stats_definition: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.cargo_stats_definition = Some(cargo_stats_definition);
        self
    }
    /// The attacker combat XP points account
    #[inline(always)]
    pub fn attacker_combat_xp(&mut self, attacker_combat_xp: solana_pubkey::Pubkey) -> &mut Self {
        self.attacker_combat_xp = Some(attacker_combat_xp);
        self
    }
    /// The attacker council rank XP points account
    #[inline(always)]
    pub fn attacker_council_rank_xp(
        &mut self,
        attacker_council_rank_xp: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.attacker_council_rank_xp = Some(attacker_council_rank_xp);
        self
    }
    /// The defender combat XP points account
    #[inline(always)]
    pub fn defender_combat_xp(&mut self, defender_combat_xp: solana_pubkey::Pubkey) -> &mut Self {
        self.defender_combat_xp = Some(defender_combat_xp);
        self
    }
    /// The defender council rank XP points account
    #[inline(always)]
    pub fn defender_council_rank_xp(
        &mut self,
        defender_council_rank_xp: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.defender_council_rank_xp = Some(defender_council_rank_xp);
        self
    }
    /// The Pilot XP Points Category Account
    #[inline(always)]
    pub fn combat_xp_category(&mut self, combat_xp_category: solana_pubkey::Pubkey) -> &mut Self {
        self.combat_xp_category = Some(combat_xp_category);
        self
    }
    /// The Council Rank XP Points Category Account
    #[inline(always)]
    pub fn council_rank_xp_category(
        &mut self,
        council_rank_xp_category: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.council_rank_xp_category = Some(council_rank_xp_category);
        self
    }
    /// The Pilot XP Modifier Account
    #[inline(always)]
    pub fn combat_xp_modifier(&mut self, combat_xp_modifier: solana_pubkey::Pubkey) -> &mut Self {
        self.combat_xp_modifier = Some(combat_xp_modifier);
        self
    }
    /// The Pilot XP Modifier Account
    #[inline(always)]
    pub fn council_rank_xp_modifier(
        &mut self,
        council_rank_xp_modifier: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.council_rank_xp_modifier = Some(council_rank_xp_modifier);
        self
    }
    /// The [`ProgressionConfig`] account
    #[inline(always)]
    pub fn progression_config(&mut self, progression_config: solana_pubkey::Pubkey) -> &mut Self {
        self.progression_config = Some(progression_config);
        self
    }
    /// The [`CombatConfig`] account
    #[inline(always)]
    pub fn combat_config(&mut self, combat_config: solana_pubkey::Pubkey) -> &mut Self {
        self.combat_config = Some(combat_config);
        self
    }
    /// The attacker's ammo token account - owned by the `attacking_cargo_pod`
    #[inline(always)]
    pub fn attacking_fleet_ammo_token(
        &mut self,
        attacking_fleet_ammo_token: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.attacking_fleet_ammo_token = Some(attacking_fleet_ammo_token);
        self
    }
    /// The defender's ammo token account - owned by the `defending_cargo_pod`
    #[inline(always)]
    pub fn defending_fleet_ammo_token(
        &mut self,
        defending_fleet_ammo_token: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.defending_fleet_ammo_token = Some(defending_fleet_ammo_token);
        self
    }
    /// The ammo token mint
    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = AttackFleet {
            key: self.key.expect("key is not set"),
            owning_profile: self.owning_profile.expect("owning_profile is not set"),
            owning_profile_faction: self
                .owning_profile_faction
                .expect("owning_profile_faction is not set"),
            fleet: self.fleet.expect("fleet is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            defending_fleet: self.defending_fleet.expect("defending_fleet is not set"),
            attacking_cargo_pod: self
                .attacking_cargo_pod
                .expect("attacking_cargo_pod is not set"),
            defending_cargo_pod: self
                .defending_cargo_pod
                .expect("defending_cargo_pod is not set"),
            cargo_type: self.cargo_type.expect("cargo_type is not set"),
            cargo_stats_definition: self
                .cargo_stats_definition
                .expect("cargo_stats_definition is not set"),
            attacker_combat_xp: self
                .attacker_combat_xp
                .expect("attacker_combat_xp is not set"),
            attacker_council_rank_xp: self
                .attacker_council_rank_xp
                .expect("attacker_council_rank_xp is not set"),
            defender_combat_xp: self
                .defender_combat_xp
                .expect("defender_combat_xp is not set"),
            defender_council_rank_xp: self
                .defender_council_rank_xp
                .expect("defender_council_rank_xp is not set"),
            combat_xp_category: self
                .combat_xp_category
                .expect("combat_xp_category is not set"),
            council_rank_xp_category: self
                .council_rank_xp_category
                .expect("council_rank_xp_category is not set"),
            combat_xp_modifier: self
                .combat_xp_modifier
                .expect("combat_xp_modifier is not set"),
            council_rank_xp_modifier: self
                .council_rank_xp_modifier
                .expect("council_rank_xp_modifier is not set"),
            progression_config: self
                .progression_config
                .expect("progression_config is not set"),
            combat_config: self.combat_config.expect("combat_config is not set"),
            attacking_fleet_ammo_token: self
                .attacking_fleet_ammo_token
                .expect("attacking_fleet_ammo_token is not set"),
            defending_fleet_ammo_token: self
                .defending_fleet_ammo_token
                .expect("defending_fleet_ammo_token is not set"),
            token_mint: self.token_mint.expect("token_mint is not set"),
        };
        let args = AttackFleetInstructionArgs {
            key_index: self.key_index.clone().expect("key_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `attack_fleet` CPI accounts.
pub struct AttackFleetCpiAccounts<'a, 'b> {
    /// The key on the profile.
    pub key: &'b solana_account_info::AccountInfo<'a>,
    /// The profile that owns the fleet.
    pub owning_profile: &'b solana_account_info::AccountInfo<'a>,
    /// The faction that the profile belongs to.
    pub owning_profile_faction: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet.
    pub fleet: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet being attacked
    pub defending_fleet: &'b solana_account_info::AccountInfo<'a>,
    /// The origin cargo pod; owned by the fleet attacking
    pub attacking_cargo_pod: &'b solana_account_info::AccountInfo<'a>,
    /// The destination cargo pod; owned by the fleet defending
    pub defending_cargo_pod: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo type for ammo
    pub cargo_type: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo stats definition account
    pub cargo_stats_definition: &'b solana_account_info::AccountInfo<'a>,
    /// The attacker combat XP points account
    pub attacker_combat_xp: &'b solana_account_info::AccountInfo<'a>,
    /// The attacker council rank XP points account
    pub attacker_council_rank_xp: &'b solana_account_info::AccountInfo<'a>,
    /// The defender combat XP points account
    pub defender_combat_xp: &'b solana_account_info::AccountInfo<'a>,
    /// The defender council rank XP points account
    pub defender_council_rank_xp: &'b solana_account_info::AccountInfo<'a>,
    /// The Pilot XP Points Category Account
    pub combat_xp_category: &'b solana_account_info::AccountInfo<'a>,
    /// The Council Rank XP Points Category Account
    pub council_rank_xp_category: &'b solana_account_info::AccountInfo<'a>,
    /// The Pilot XP Modifier Account
    pub combat_xp_modifier: &'b solana_account_info::AccountInfo<'a>,
    /// The Pilot XP Modifier Account
    pub council_rank_xp_modifier: &'b solana_account_info::AccountInfo<'a>,
    /// The [`ProgressionConfig`] account
    pub progression_config: &'b solana_account_info::AccountInfo<'a>,
    /// The [`CombatConfig`] account
    pub combat_config: &'b solana_account_info::AccountInfo<'a>,
    /// The attacker's ammo token account - owned by the `attacking_cargo_pod`
    pub attacking_fleet_ammo_token: &'b solana_account_info::AccountInfo<'a>,
    /// The defender's ammo token account - owned by the `defending_cargo_pod`
    pub defending_fleet_ammo_token: &'b solana_account_info::AccountInfo<'a>,
    /// The ammo token mint
    pub token_mint: &'b solana_account_info::AccountInfo<'a>,
}

/// `attack_fleet` CPI instruction.
pub struct AttackFleetCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The key on the profile.
    pub key: &'b solana_account_info::AccountInfo<'a>,
    /// The profile that owns the fleet.
    pub owning_profile: &'b solana_account_info::AccountInfo<'a>,
    /// The faction that the profile belongs to.
    pub owning_profile_faction: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet.
    pub fleet: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet being attacked
    pub defending_fleet: &'b solana_account_info::AccountInfo<'a>,
    /// The origin cargo pod; owned by the fleet attacking
    pub attacking_cargo_pod: &'b solana_account_info::AccountInfo<'a>,
    /// The destination cargo pod; owned by the fleet defending
    pub defending_cargo_pod: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo type for ammo
    pub cargo_type: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo stats definition account
    pub cargo_stats_definition: &'b solana_account_info::AccountInfo<'a>,
    /// The attacker combat XP points account
    pub attacker_combat_xp: &'b solana_account_info::AccountInfo<'a>,
    /// The attacker council rank XP points account
    pub attacker_council_rank_xp: &'b solana_account_info::AccountInfo<'a>,
    /// The defender combat XP points account
    pub defender_combat_xp: &'b solana_account_info::AccountInfo<'a>,
    /// The defender council rank XP points account
    pub defender_council_rank_xp: &'b solana_account_info::AccountInfo<'a>,
    /// The Pilot XP Points Category Account
    pub combat_xp_category: &'b solana_account_info::AccountInfo<'a>,
    /// The Council Rank XP Points Category Account
    pub council_rank_xp_category: &'b solana_account_info::AccountInfo<'a>,
    /// The Pilot XP Modifier Account
    pub combat_xp_modifier: &'b solana_account_info::AccountInfo<'a>,
    /// The Pilot XP Modifier Account
    pub council_rank_xp_modifier: &'b solana_account_info::AccountInfo<'a>,
    /// The [`ProgressionConfig`] account
    pub progression_config: &'b solana_account_info::AccountInfo<'a>,
    /// The [`CombatConfig`] account
    pub combat_config: &'b solana_account_info::AccountInfo<'a>,
    /// The attacker's ammo token account - owned by the `attacking_cargo_pod`
    pub attacking_fleet_ammo_token: &'b solana_account_info::AccountInfo<'a>,
    /// The defender's ammo token account - owned by the `defending_cargo_pod`
    pub defending_fleet_ammo_token: &'b solana_account_info::AccountInfo<'a>,
    /// The ammo token mint
    pub token_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AttackFleetInstructionArgs,
}

impl<'a, 'b> AttackFleetCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: AttackFleetCpiAccounts<'a, 'b>,
        args: AttackFleetInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            key: accounts.key,
            owning_profile: accounts.owning_profile,
            owning_profile_faction: accounts.owning_profile_faction,
            fleet: accounts.fleet,
            game_id: accounts.game_id,
            defending_fleet: accounts.defending_fleet,
            attacking_cargo_pod: accounts.attacking_cargo_pod,
            defending_cargo_pod: accounts.defending_cargo_pod,
            cargo_type: accounts.cargo_type,
            cargo_stats_definition: accounts.cargo_stats_definition,
            attacker_combat_xp: accounts.attacker_combat_xp,
            attacker_council_rank_xp: accounts.attacker_council_rank_xp,
            defender_combat_xp: accounts.defender_combat_xp,
            defender_council_rank_xp: accounts.defender_council_rank_xp,
            combat_xp_category: accounts.combat_xp_category,
            council_rank_xp_category: accounts.council_rank_xp_category,
            combat_xp_modifier: accounts.combat_xp_modifier,
            council_rank_xp_modifier: accounts.council_rank_xp_modifier,
            progression_config: accounts.progression_config,
            combat_config: accounts.combat_config,
            attacking_fleet_ammo_token: accounts.attacking_fleet_ammo_token,
            defending_fleet_ammo_token: accounts.defending_fleet_ammo_token,
            token_mint: accounts.token_mint,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(23 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owning_profile.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owning_profile_faction.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.fleet.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.defending_fleet.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.attacking_cargo_pod.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.defending_cargo_pod.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.cargo_type.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.cargo_stats_definition.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.attacker_combat_xp.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.attacker_council_rank_xp.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.defender_combat_xp.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.defender_council_rank_xp.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.combat_xp_category.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.council_rank_xp_category.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.combat_xp_modifier.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.council_rank_xp_modifier.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.progression_config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.combat_config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.attacking_fleet_ammo_token.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.defending_fleet_ammo_token.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_mint.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&AttackFleetInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(24 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.owning_profile.clone());
        account_infos.push(self.owning_profile_faction.clone());
        account_infos.push(self.fleet.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.defending_fleet.clone());
        account_infos.push(self.attacking_cargo_pod.clone());
        account_infos.push(self.defending_cargo_pod.clone());
        account_infos.push(self.cargo_type.clone());
        account_infos.push(self.cargo_stats_definition.clone());
        account_infos.push(self.attacker_combat_xp.clone());
        account_infos.push(self.attacker_council_rank_xp.clone());
        account_infos.push(self.defender_combat_xp.clone());
        account_infos.push(self.defender_council_rank_xp.clone());
        account_infos.push(self.combat_xp_category.clone());
        account_infos.push(self.council_rank_xp_category.clone());
        account_infos.push(self.combat_xp_modifier.clone());
        account_infos.push(self.council_rank_xp_modifier.clone());
        account_infos.push(self.progression_config.clone());
        account_infos.push(self.combat_config.clone());
        account_infos.push(self.attacking_fleet_ammo_token.clone());
        account_infos.push(self.defending_fleet_ammo_token.clone());
        account_infos.push(self.token_mint.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AttackFleet` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` owning_profile
///   2. `[]` owning_profile_faction
///   3. `[writable]` fleet
///   4. `[]` game_id
///   5. `[writable]` defending_fleet
///   6. `[writable]` attacking_cargo_pod
///   7. `[writable]` defending_cargo_pod
///   8. `[]` cargo_type
///   9. `[]` cargo_stats_definition
///   10. `[writable]` attacker_combat_xp
///   11. `[writable]` attacker_council_rank_xp
///   12. `[writable]` defender_combat_xp
///   13. `[writable]` defender_council_rank_xp
///   14. `[]` combat_xp_category
///   15. `[]` council_rank_xp_category
///   16. `[]` combat_xp_modifier
///   17. `[]` council_rank_xp_modifier
///   18. `[]` progression_config
///   19. `[]` combat_config
///   20. `[writable]` attacking_fleet_ammo_token
///   21. `[writable]` defending_fleet_ammo_token
///   22. `[writable]` token_mint
#[derive(Clone, Debug)]
pub struct AttackFleetCpiBuilder<'a, 'b> {
    instruction: Box<AttackFleetCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AttackFleetCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AttackFleetCpiBuilderInstruction {
            __program: program,
            key: None,
            owning_profile: None,
            owning_profile_faction: None,
            fleet: None,
            game_id: None,
            defending_fleet: None,
            attacking_cargo_pod: None,
            defending_cargo_pod: None,
            cargo_type: None,
            cargo_stats_definition: None,
            attacker_combat_xp: None,
            attacker_council_rank_xp: None,
            defender_combat_xp: None,
            defender_council_rank_xp: None,
            combat_xp_category: None,
            council_rank_xp_category: None,
            combat_xp_modifier: None,
            council_rank_xp_modifier: None,
            progression_config: None,
            combat_config: None,
            attacking_fleet_ammo_token: None,
            defending_fleet_ammo_token: None,
            token_mint: None,
            key_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The key on the profile.
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The profile that owns the fleet.
    #[inline(always)]
    pub fn owning_profile(
        &mut self,
        owning_profile: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.owning_profile = Some(owning_profile);
        self
    }
    /// The faction that the profile belongs to.
    #[inline(always)]
    pub fn owning_profile_faction(
        &mut self,
        owning_profile_faction: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.owning_profile_faction = Some(owning_profile_faction);
        self
    }
    /// The fleet.
    #[inline(always)]
    pub fn fleet(&mut self, fleet: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.fleet = Some(fleet);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The fleet being attacked
    #[inline(always)]
    pub fn defending_fleet(
        &mut self,
        defending_fleet: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.defending_fleet = Some(defending_fleet);
        self
    }
    /// The origin cargo pod; owned by the fleet attacking
    #[inline(always)]
    pub fn attacking_cargo_pod(
        &mut self,
        attacking_cargo_pod: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attacking_cargo_pod = Some(attacking_cargo_pod);
        self
    }
    /// The destination cargo pod; owned by the fleet defending
    #[inline(always)]
    pub fn defending_cargo_pod(
        &mut self,
        defending_cargo_pod: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.defending_cargo_pod = Some(defending_cargo_pod);
        self
    }
    /// The cargo type for ammo
    #[inline(always)]
    pub fn cargo_type(
        &mut self,
        cargo_type: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_type = Some(cargo_type);
        self
    }
    /// The cargo stats definition account
    #[inline(always)]
    pub fn cargo_stats_definition(
        &mut self,
        cargo_stats_definition: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_stats_definition = Some(cargo_stats_definition);
        self
    }
    /// The attacker combat XP points account
    #[inline(always)]
    pub fn attacker_combat_xp(
        &mut self,
        attacker_combat_xp: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attacker_combat_xp = Some(attacker_combat_xp);
        self
    }
    /// The attacker council rank XP points account
    #[inline(always)]
    pub fn attacker_council_rank_xp(
        &mut self,
        attacker_council_rank_xp: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attacker_council_rank_xp = Some(attacker_council_rank_xp);
        self
    }
    /// The defender combat XP points account
    #[inline(always)]
    pub fn defender_combat_xp(
        &mut self,
        defender_combat_xp: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.defender_combat_xp = Some(defender_combat_xp);
        self
    }
    /// The defender council rank XP points account
    #[inline(always)]
    pub fn defender_council_rank_xp(
        &mut self,
        defender_council_rank_xp: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.defender_council_rank_xp = Some(defender_council_rank_xp);
        self
    }
    /// The Pilot XP Points Category Account
    #[inline(always)]
    pub fn combat_xp_category(
        &mut self,
        combat_xp_category: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.combat_xp_category = Some(combat_xp_category);
        self
    }
    /// The Council Rank XP Points Category Account
    #[inline(always)]
    pub fn council_rank_xp_category(
        &mut self,
        council_rank_xp_category: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.council_rank_xp_category = Some(council_rank_xp_category);
        self
    }
    /// The Pilot XP Modifier Account
    #[inline(always)]
    pub fn combat_xp_modifier(
        &mut self,
        combat_xp_modifier: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.combat_xp_modifier = Some(combat_xp_modifier);
        self
    }
    /// The Pilot XP Modifier Account
    #[inline(always)]
    pub fn council_rank_xp_modifier(
        &mut self,
        council_rank_xp_modifier: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.council_rank_xp_modifier = Some(council_rank_xp_modifier);
        self
    }
    /// The [`ProgressionConfig`] account
    #[inline(always)]
    pub fn progression_config(
        &mut self,
        progression_config: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.progression_config = Some(progression_config);
        self
    }
    /// The [`CombatConfig`] account
    #[inline(always)]
    pub fn combat_config(
        &mut self,
        combat_config: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.combat_config = Some(combat_config);
        self
    }
    /// The attacker's ammo token account - owned by the `attacking_cargo_pod`
    #[inline(always)]
    pub fn attacking_fleet_ammo_token(
        &mut self,
        attacking_fleet_ammo_token: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.attacking_fleet_ammo_token = Some(attacking_fleet_ammo_token);
        self
    }
    /// The defender's ammo token account - owned by the `defending_cargo_pod`
    #[inline(always)]
    pub fn defending_fleet_ammo_token(
        &mut self,
        defending_fleet_ammo_token: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.defending_fleet_ammo_token = Some(defending_fleet_ammo_token);
        self
    }
    /// The ammo token mint
    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.instruction.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = AttackFleetInstructionArgs {
            key_index: self
                .instruction
                .key_index
                .clone()
                .expect("key_index is not set"),
        };
        let instruction = AttackFleetCpi {
            __program: self.instruction.__program,

            key: self.instruction.key.expect("key is not set"),

            owning_profile: self
                .instruction
                .owning_profile
                .expect("owning_profile is not set"),

            owning_profile_faction: self
                .instruction
                .owning_profile_faction
                .expect("owning_profile_faction is not set"),

            fleet: self.instruction.fleet.expect("fleet is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            defending_fleet: self
                .instruction
                .defending_fleet
                .expect("defending_fleet is not set"),

            attacking_cargo_pod: self
                .instruction
                .attacking_cargo_pod
                .expect("attacking_cargo_pod is not set"),

            defending_cargo_pod: self
                .instruction
                .defending_cargo_pod
                .expect("defending_cargo_pod is not set"),

            cargo_type: self.instruction.cargo_type.expect("cargo_type is not set"),

            cargo_stats_definition: self
                .instruction
                .cargo_stats_definition
                .expect("cargo_stats_definition is not set"),

            attacker_combat_xp: self
                .instruction
                .attacker_combat_xp
                .expect("attacker_combat_xp is not set"),

            attacker_council_rank_xp: self
                .instruction
                .attacker_council_rank_xp
                .expect("attacker_council_rank_xp is not set"),

            defender_combat_xp: self
                .instruction
                .defender_combat_xp
                .expect("defender_combat_xp is not set"),

            defender_council_rank_xp: self
                .instruction
                .defender_council_rank_xp
                .expect("defender_council_rank_xp is not set"),

            combat_xp_category: self
                .instruction
                .combat_xp_category
                .expect("combat_xp_category is not set"),

            council_rank_xp_category: self
                .instruction
                .council_rank_xp_category
                .expect("council_rank_xp_category is not set"),

            combat_xp_modifier: self
                .instruction
                .combat_xp_modifier
                .expect("combat_xp_modifier is not set"),

            council_rank_xp_modifier: self
                .instruction
                .council_rank_xp_modifier
                .expect("council_rank_xp_modifier is not set"),

            progression_config: self
                .instruction
                .progression_config
                .expect("progression_config is not set"),

            combat_config: self
                .instruction
                .combat_config
                .expect("combat_config is not set"),

            attacking_fleet_ammo_token: self
                .instruction
                .attacking_fleet_ammo_token
                .expect("attacking_fleet_ammo_token is not set"),

            defending_fleet_ammo_token: self
                .instruction
                .defending_fleet_ammo_token
                .expect("defending_fleet_ammo_token is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AttackFleetCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    key: Option<&'b solana_account_info::AccountInfo<'a>>,
    owning_profile: Option<&'b solana_account_info::AccountInfo<'a>>,
    owning_profile_faction: Option<&'b solana_account_info::AccountInfo<'a>>,
    fleet: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_account_info::AccountInfo<'a>>,
    defending_fleet: Option<&'b solana_account_info::AccountInfo<'a>>,
    attacking_cargo_pod: Option<&'b solana_account_info::AccountInfo<'a>>,
    defending_cargo_pod: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_type: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_stats_definition: Option<&'b solana_account_info::AccountInfo<'a>>,
    attacker_combat_xp: Option<&'b solana_account_info::AccountInfo<'a>>,
    attacker_council_rank_xp: Option<&'b solana_account_info::AccountInfo<'a>>,
    defender_combat_xp: Option<&'b solana_account_info::AccountInfo<'a>>,
    defender_council_rank_xp: Option<&'b solana_account_info::AccountInfo<'a>>,
    combat_xp_category: Option<&'b solana_account_info::AccountInfo<'a>>,
    council_rank_xp_category: Option<&'b solana_account_info::AccountInfo<'a>>,
    combat_xp_modifier: Option<&'b solana_account_info::AccountInfo<'a>>,
    council_rank_xp_modifier: Option<&'b solana_account_info::AccountInfo<'a>>,
    progression_config: Option<&'b solana_account_info::AccountInfo<'a>>,
    combat_config: Option<&'b solana_account_info::AccountInfo<'a>>,
    attacking_fleet_ammo_token: Option<&'b solana_account_info::AccountInfo<'a>>,
    defending_fleet_ammo_token: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    key_index: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
