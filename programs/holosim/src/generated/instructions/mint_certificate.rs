//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct MintCertificate {
    /// The [`Starbase`] account
    pub starbase: solana_program::pubkey::Pubkey,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: solana_program::pubkey::Pubkey,
    /// The key authorized for this instruction
    pub key: solana_program::pubkey::Pubkey,
    /// The [`Profile`] account
    pub profile: solana_program::pubkey::Pubkey,
    /// The faction that the profile belongs to.
    pub profile_faction: solana_program::pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_program::pubkey::Pubkey,
    /// The [`GameState`] account
    pub game_state: solana_program::pubkey::Pubkey,
    /// The mint of the cargo in question
    pub cargo_mint: solana_program::pubkey::Pubkey,
    /// The cargo certificate mint
    pub certificate_mint: solana_program::pubkey::Pubkey,
    /// The token account where certificates are minted to
    pub certificate_token_to: solana_program::pubkey::Pubkey,
    /// The source token account for the cargo - owned by the `cargo_pod`
    pub cargo_token_from: solana_program::pubkey::Pubkey,
    /// The destination token account for the cargo - owned by the Starbase
    pub cargo_token_to: solana_program::pubkey::Pubkey,
    /// The cargo pod to take from
    pub cargo_pod: solana_program::pubkey::Pubkey,
    /// The cargo type account
    pub cargo_type: solana_program::pubkey::Pubkey,
    /// The cargo stats definition account
    pub cargo_stats_definition: solana_program::pubkey::Pubkey,
    /// The Cargo Program
    pub cargo_program: solana_program::pubkey::Pubkey,
    /// The token program
    pub token_program: solana_program::pubkey::Pubkey,
    /// The token 2022 program
    pub token2022_program: solana_program::pubkey::Pubkey,
}

impl MintCertificate {
    pub fn instruction(
        &self,
        args: MintCertificateInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: MintCertificateInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.starbase,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.starbase_player,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.profile_faction,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cargo_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.certificate_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.certificate_token_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cargo_token_from,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cargo_token_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cargo_pod,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cargo_type,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cargo_stats_definition,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cargo_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token2022_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&MintCertificateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MintCertificateInstructionData {
    discriminator: [u8; 8],
}

impl MintCertificateInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [53, 2, 104, 84, 51, 197, 179, 10],
        }
    }
}

impl Default for MintCertificateInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MintCertificateInstructionArgs {
    pub key_index: u16,
    pub amount: u64,
}

/// Instruction builder for `MintCertificate`.
///
/// ### Accounts:
///
///   0. `[]` starbase
///   1. `[]` starbase_player
///   2. `[signer]` key
///   3. `[]` profile
///   4. `[]` profile_faction
///   5. `[]` game_id
///   6. `[]` game_state
///   7. `[]` cargo_mint
///   8. `[writable]` certificate_mint
///   9. `[writable]` certificate_token_to
///   10. `[writable]` cargo_token_from
///   11. `[writable]` cargo_token_to
///   12. `[writable]` cargo_pod
///   13. `[]` cargo_type
///   14. `[]` cargo_stats_definition
///   15. `[]` cargo_program
///   16. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   17. `[]` token2022_program
#[derive(Clone, Debug, Default)]
pub struct MintCertificateBuilder {
    starbase: Option<solana_program::pubkey::Pubkey>,
    starbase_player: Option<solana_program::pubkey::Pubkey>,
    key: Option<solana_program::pubkey::Pubkey>,
    profile: Option<solana_program::pubkey::Pubkey>,
    profile_faction: Option<solana_program::pubkey::Pubkey>,
    game_id: Option<solana_program::pubkey::Pubkey>,
    game_state: Option<solana_program::pubkey::Pubkey>,
    cargo_mint: Option<solana_program::pubkey::Pubkey>,
    certificate_mint: Option<solana_program::pubkey::Pubkey>,
    certificate_token_to: Option<solana_program::pubkey::Pubkey>,
    cargo_token_from: Option<solana_program::pubkey::Pubkey>,
    cargo_token_to: Option<solana_program::pubkey::Pubkey>,
    cargo_pod: Option<solana_program::pubkey::Pubkey>,
    cargo_type: Option<solana_program::pubkey::Pubkey>,
    cargo_stats_definition: Option<solana_program::pubkey::Pubkey>,
    cargo_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token2022_program: Option<solana_program::pubkey::Pubkey>,
    key_index: Option<u16>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MintCertificateBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(&mut self, starbase: solana_program::pubkey::Pubkey) -> &mut Self {
        self.starbase = Some(starbase);
        self
    }
    /// The [`StarbasePlayer`] Account
    #[inline(always)]
    pub fn starbase_player(
        &mut self,
        starbase_player: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.starbase_player = Some(starbase_player);
        self
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: solana_program::pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_program::pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// The faction that the profile belongs to.
    #[inline(always)]
    pub fn profile_faction(
        &mut self,
        profile_faction: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.profile_faction = Some(profile_faction);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(&mut self, game_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_state = Some(game_state);
        self
    }
    /// The mint of the cargo in question
    #[inline(always)]
    pub fn cargo_mint(&mut self, cargo_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cargo_mint = Some(cargo_mint);
        self
    }
    /// The cargo certificate mint
    #[inline(always)]
    pub fn certificate_mint(
        &mut self,
        certificate_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.certificate_mint = Some(certificate_mint);
        self
    }
    /// The token account where certificates are minted to
    #[inline(always)]
    pub fn certificate_token_to(
        &mut self,
        certificate_token_to: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.certificate_token_to = Some(certificate_token_to);
        self
    }
    /// The source token account for the cargo - owned by the `cargo_pod`
    #[inline(always)]
    pub fn cargo_token_from(
        &mut self,
        cargo_token_from: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cargo_token_from = Some(cargo_token_from);
        self
    }
    /// The destination token account for the cargo - owned by the Starbase
    #[inline(always)]
    pub fn cargo_token_to(&mut self, cargo_token_to: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cargo_token_to = Some(cargo_token_to);
        self
    }
    /// The cargo pod to take from
    #[inline(always)]
    pub fn cargo_pod(&mut self, cargo_pod: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cargo_pod = Some(cargo_pod);
        self
    }
    /// The cargo type account
    #[inline(always)]
    pub fn cargo_type(&mut self, cargo_type: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cargo_type = Some(cargo_type);
        self
    }
    /// The cargo stats definition account
    #[inline(always)]
    pub fn cargo_stats_definition(
        &mut self,
        cargo_stats_definition: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cargo_stats_definition = Some(cargo_stats_definition);
        self
    }
    /// The Cargo Program
    #[inline(always)]
    pub fn cargo_program(&mut self, cargo_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cargo_program = Some(cargo_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// The token program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// The token 2022 program
    #[inline(always)]
    pub fn token2022_program(
        &mut self,
        token2022_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token2022_program = Some(token2022_program);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.key_index = Some(key_index);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MintCertificate {
            starbase: self.starbase.expect("starbase is not set"),
            starbase_player: self.starbase_player.expect("starbase_player is not set"),
            key: self.key.expect("key is not set"),
            profile: self.profile.expect("profile is not set"),
            profile_faction: self.profile_faction.expect("profile_faction is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            game_state: self.game_state.expect("game_state is not set"),
            cargo_mint: self.cargo_mint.expect("cargo_mint is not set"),
            certificate_mint: self.certificate_mint.expect("certificate_mint is not set"),
            certificate_token_to: self
                .certificate_token_to
                .expect("certificate_token_to is not set"),
            cargo_token_from: self.cargo_token_from.expect("cargo_token_from is not set"),
            cargo_token_to: self.cargo_token_to.expect("cargo_token_to is not set"),
            cargo_pod: self.cargo_pod.expect("cargo_pod is not set"),
            cargo_type: self.cargo_type.expect("cargo_type is not set"),
            cargo_stats_definition: self
                .cargo_stats_definition
                .expect("cargo_stats_definition is not set"),
            cargo_program: self.cargo_program.expect("cargo_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token2022_program: self
                .token2022_program
                .expect("token2022_program is not set"),
        };
        let args = MintCertificateInstructionArgs {
            key_index: self.key_index.clone().expect("key_index is not set"),
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `mint_certificate` CPI accounts.
pub struct MintCertificateCpiAccounts<'a, 'b> {
    /// The [`Starbase`] account
    pub starbase: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: &'b solana_program::account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The faction that the profile belongs to.
    pub profile_faction: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of the cargo in question
    pub cargo_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo certificate mint
    pub certificate_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account where certificates are minted to
    pub certificate_token_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The source token account for the cargo - owned by the `cargo_pod`
    pub cargo_token_from: &'b solana_program::account_info::AccountInfo<'a>,
    /// The destination token account for the cargo - owned by the Starbase
    pub cargo_token_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo pod to take from
    pub cargo_pod: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo type account
    pub cargo_type: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo stats definition account
    pub cargo_stats_definition: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Cargo Program
    pub cargo_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token 2022 program
    pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `mint_certificate` CPI instruction.
pub struct MintCertificateCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub starbase: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: &'b solana_program::account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The faction that the profile belongs to.
    pub profile_faction: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of the cargo in question
    pub cargo_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo certificate mint
    pub certificate_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account where certificates are minted to
    pub certificate_token_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The source token account for the cargo - owned by the `cargo_pod`
    pub cargo_token_from: &'b solana_program::account_info::AccountInfo<'a>,
    /// The destination token account for the cargo - owned by the Starbase
    pub cargo_token_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo pod to take from
    pub cargo_pod: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo type account
    pub cargo_type: &'b solana_program::account_info::AccountInfo<'a>,
    /// The cargo stats definition account
    pub cargo_stats_definition: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Cargo Program
    pub cargo_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token 2022 program
    pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: MintCertificateInstructionArgs,
}

impl<'a, 'b> MintCertificateCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MintCertificateCpiAccounts<'a, 'b>,
        args: MintCertificateInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            starbase: accounts.starbase,
            starbase_player: accounts.starbase_player,
            key: accounts.key,
            profile: accounts.profile,
            profile_faction: accounts.profile_faction,
            game_id: accounts.game_id,
            game_state: accounts.game_state,
            cargo_mint: accounts.cargo_mint,
            certificate_mint: accounts.certificate_mint,
            certificate_token_to: accounts.certificate_token_to,
            cargo_token_from: accounts.cargo_token_from,
            cargo_token_to: accounts.cargo_token_to,
            cargo_pod: accounts.cargo_pod,
            cargo_type: accounts.cargo_type,
            cargo_stats_definition: accounts.cargo_stats_definition,
            cargo_program: accounts.cargo_program,
            token_program: accounts.token_program,
            token2022_program: accounts.token2022_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.starbase.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.starbase_player.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.profile_faction.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cargo_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.certificate_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.certificate_token_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cargo_token_from.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cargo_token_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cargo_pod.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cargo_type.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cargo_stats_definition.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cargo_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token2022_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&MintCertificateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(19 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.starbase.clone());
        account_infos.push(self.starbase_player.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.profile_faction.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.game_state.clone());
        account_infos.push(self.cargo_mint.clone());
        account_infos.push(self.certificate_mint.clone());
        account_infos.push(self.certificate_token_to.clone());
        account_infos.push(self.cargo_token_from.clone());
        account_infos.push(self.cargo_token_to.clone());
        account_infos.push(self.cargo_pod.clone());
        account_infos.push(self.cargo_type.clone());
        account_infos.push(self.cargo_stats_definition.clone());
        account_infos.push(self.cargo_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token2022_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MintCertificate` via CPI.
///
/// ### Accounts:
///
///   0. `[]` starbase
///   1. `[]` starbase_player
///   2. `[signer]` key
///   3. `[]` profile
///   4. `[]` profile_faction
///   5. `[]` game_id
///   6. `[]` game_state
///   7. `[]` cargo_mint
///   8. `[writable]` certificate_mint
///   9. `[writable]` certificate_token_to
///   10. `[writable]` cargo_token_from
///   11. `[writable]` cargo_token_to
///   12. `[writable]` cargo_pod
///   13. `[]` cargo_type
///   14. `[]` cargo_stats_definition
///   15. `[]` cargo_program
///   16. `[]` token_program
///   17. `[]` token2022_program
#[derive(Clone, Debug)]
pub struct MintCertificateCpiBuilder<'a, 'b> {
    instruction: Box<MintCertificateCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MintCertificateCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MintCertificateCpiBuilderInstruction {
            __program: program,
            starbase: None,
            starbase_player: None,
            key: None,
            profile: None,
            profile_faction: None,
            game_id: None,
            game_state: None,
            cargo_mint: None,
            certificate_mint: None,
            certificate_token_to: None,
            cargo_token_from: None,
            cargo_token_to: None,
            cargo_pod: None,
            cargo_type: None,
            cargo_stats_definition: None,
            cargo_program: None,
            token_program: None,
            token2022_program: None,
            key_index: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(
        &mut self,
        starbase: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.starbase = Some(starbase);
        self
    }
    /// The [`StarbasePlayer`] Account
    #[inline(always)]
    pub fn starbase_player(
        &mut self,
        starbase_player: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.starbase_player = Some(starbase_player);
        self
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(
        &mut self,
        profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The faction that the profile belongs to.
    #[inline(always)]
    pub fn profile_faction(
        &mut self,
        profile_faction: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.profile_faction = Some(profile_faction);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(
        &mut self,
        game_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(
        &mut self,
        game_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_state = Some(game_state);
        self
    }
    /// The mint of the cargo in question
    #[inline(always)]
    pub fn cargo_mint(
        &mut self,
        cargo_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_mint = Some(cargo_mint);
        self
    }
    /// The cargo certificate mint
    #[inline(always)]
    pub fn certificate_mint(
        &mut self,
        certificate_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.certificate_mint = Some(certificate_mint);
        self
    }
    /// The token account where certificates are minted to
    #[inline(always)]
    pub fn certificate_token_to(
        &mut self,
        certificate_token_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.certificate_token_to = Some(certificate_token_to);
        self
    }
    /// The source token account for the cargo - owned by the `cargo_pod`
    #[inline(always)]
    pub fn cargo_token_from(
        &mut self,
        cargo_token_from: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_token_from = Some(cargo_token_from);
        self
    }
    /// The destination token account for the cargo - owned by the Starbase
    #[inline(always)]
    pub fn cargo_token_to(
        &mut self,
        cargo_token_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_token_to = Some(cargo_token_to);
        self
    }
    /// The cargo pod to take from
    #[inline(always)]
    pub fn cargo_pod(
        &mut self,
        cargo_pod: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_pod = Some(cargo_pod);
        self
    }
    /// The cargo type account
    #[inline(always)]
    pub fn cargo_type(
        &mut self,
        cargo_type: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_type = Some(cargo_type);
        self
    }
    /// The cargo stats definition account
    #[inline(always)]
    pub fn cargo_stats_definition(
        &mut self,
        cargo_stats_definition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_stats_definition = Some(cargo_stats_definition);
        self
    }
    /// The Cargo Program
    #[inline(always)]
    pub fn cargo_program(
        &mut self,
        cargo_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_program = Some(cargo_program);
        self
    }
    /// The token program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// The token 2022 program
    #[inline(always)]
    pub fn token2022_program(
        &mut self,
        token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token2022_program = Some(token2022_program);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.instruction.key_index = Some(key_index);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = MintCertificateInstructionArgs {
            key_index: self
                .instruction
                .key_index
                .clone()
                .expect("key_index is not set"),
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = MintCertificateCpi {
            __program: self.instruction.__program,

            starbase: self.instruction.starbase.expect("starbase is not set"),

            starbase_player: self
                .instruction
                .starbase_player
                .expect("starbase_player is not set"),

            key: self.instruction.key.expect("key is not set"),

            profile: self.instruction.profile.expect("profile is not set"),

            profile_faction: self
                .instruction
                .profile_faction
                .expect("profile_faction is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            game_state: self.instruction.game_state.expect("game_state is not set"),

            cargo_mint: self.instruction.cargo_mint.expect("cargo_mint is not set"),

            certificate_mint: self
                .instruction
                .certificate_mint
                .expect("certificate_mint is not set"),

            certificate_token_to: self
                .instruction
                .certificate_token_to
                .expect("certificate_token_to is not set"),

            cargo_token_from: self
                .instruction
                .cargo_token_from
                .expect("cargo_token_from is not set"),

            cargo_token_to: self
                .instruction
                .cargo_token_to
                .expect("cargo_token_to is not set"),

            cargo_pod: self.instruction.cargo_pod.expect("cargo_pod is not set"),

            cargo_type: self.instruction.cargo_type.expect("cargo_type is not set"),

            cargo_stats_definition: self
                .instruction
                .cargo_stats_definition
                .expect("cargo_stats_definition is not set"),

            cargo_program: self
                .instruction
                .cargo_program
                .expect("cargo_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token2022_program: self
                .instruction
                .token2022_program
                .expect("token2022_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MintCertificateCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    starbase: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    starbase_player: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    key: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    profile_faction: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    certificate_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    certificate_token_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_token_from: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_token_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_pod: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_type: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_stats_definition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token2022_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    key_index: Option<u16>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
