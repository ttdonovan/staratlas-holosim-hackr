//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const ADD_RENTAL_DISCRIMINATOR: [u8; 8] = [213, 113, 170, 123, 187, 90, 28, 115];

/// Accounts.
#[derive(Debug)]
pub struct AddRental {
    /// The fleet owner's profile.
    pub owner_profile: solana_pubkey::Pubkey,
    /// The key on the owner profile with renting permissions.
    pub owner_key: solana_pubkey::Pubkey,
    /// The fleet rental invalidator - this is a signer to help make sure the fleet won't be locked.
    pub invalidator: solana_pubkey::Pubkey,
    /// The fleet to rent out.
    pub fleet: solana_pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_pubkey::Pubkey,
}

impl AddRental {
    pub fn instruction(&self, args: AddRentalInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AddRentalInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner_profile,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner_key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.invalidator,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.fleet, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&AddRentalInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddRentalInstructionData {
    discriminator: [u8; 8],
}

impl AddRentalInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [213, 113, 170, 123, 187, 90, 28, 115],
        }
    }
}

impl Default for AddRentalInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddRentalInstructionArgs {
    pub owner_key_index: u16,
}

/// Instruction builder for `AddRental`.
///
/// ### Accounts:
///
///   0. `[]` owner_profile
///   1. `[signer]` owner_key
///   2. `[signer]` invalidator
///   3. `[writable]` fleet
///   4. `[]` game_id
#[derive(Clone, Debug, Default)]
pub struct AddRentalBuilder {
    owner_profile: Option<solana_pubkey::Pubkey>,
    owner_key: Option<solana_pubkey::Pubkey>,
    invalidator: Option<solana_pubkey::Pubkey>,
    fleet: Option<solana_pubkey::Pubkey>,
    game_id: Option<solana_pubkey::Pubkey>,
    owner_key_index: Option<u16>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl AddRentalBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The fleet owner's profile.
    #[inline(always)]
    pub fn owner_profile(&mut self, owner_profile: solana_pubkey::Pubkey) -> &mut Self {
        self.owner_profile = Some(owner_profile);
        self
    }
    /// The key on the owner profile with renting permissions.
    #[inline(always)]
    pub fn owner_key(&mut self, owner_key: solana_pubkey::Pubkey) -> &mut Self {
        self.owner_key = Some(owner_key);
        self
    }
    /// The fleet rental invalidator - this is a signer to help make sure the fleet won't be locked.
    #[inline(always)]
    pub fn invalidator(&mut self, invalidator: solana_pubkey::Pubkey) -> &mut Self {
        self.invalidator = Some(invalidator);
        self
    }
    /// The fleet to rent out.
    #[inline(always)]
    pub fn fleet(&mut self, fleet: solana_pubkey::Pubkey) -> &mut Self {
        self.fleet = Some(fleet);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    #[inline(always)]
    pub fn owner_key_index(&mut self, owner_key_index: u16) -> &mut Self {
        self.owner_key_index = Some(owner_key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = AddRental {
            owner_profile: self.owner_profile.expect("owner_profile is not set"),
            owner_key: self.owner_key.expect("owner_key is not set"),
            invalidator: self.invalidator.expect("invalidator is not set"),
            fleet: self.fleet.expect("fleet is not set"),
            game_id: self.game_id.expect("game_id is not set"),
        };
        let args = AddRentalInstructionArgs {
            owner_key_index: self
                .owner_key_index
                .clone()
                .expect("owner_key_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `add_rental` CPI accounts.
pub struct AddRentalCpiAccounts<'a, 'b> {
    /// The fleet owner's profile.
    pub owner_profile: &'b solana_account_info::AccountInfo<'a>,
    /// The key on the owner profile with renting permissions.
    pub owner_key: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet rental invalidator - this is a signer to help make sure the fleet won't be locked.
    pub invalidator: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet to rent out.
    pub fleet: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
}

/// `add_rental` CPI instruction.
pub struct AddRentalCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet owner's profile.
    pub owner_profile: &'b solana_account_info::AccountInfo<'a>,
    /// The key on the owner profile with renting permissions.
    pub owner_key: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet rental invalidator - this is a signer to help make sure the fleet won't be locked.
    pub invalidator: &'b solana_account_info::AccountInfo<'a>,
    /// The fleet to rent out.
    pub fleet: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AddRentalInstructionArgs,
}

impl<'a, 'b> AddRentalCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: AddRentalCpiAccounts<'a, 'b>,
        args: AddRentalInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            owner_profile: accounts.owner_profile,
            owner_key: accounts.owner_key,
            invalidator: accounts.invalidator,
            fleet: accounts.fleet,
            game_id: accounts.game_id,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner_profile.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner_key.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.invalidator.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.fleet.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&AddRentalInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner_profile.clone());
        account_infos.push(self.owner_key.clone());
        account_infos.push(self.invalidator.clone());
        account_infos.push(self.fleet.clone());
        account_infos.push(self.game_id.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AddRental` via CPI.
///
/// ### Accounts:
///
///   0. `[]` owner_profile
///   1. `[signer]` owner_key
///   2. `[signer]` invalidator
///   3. `[writable]` fleet
///   4. `[]` game_id
#[derive(Clone, Debug)]
pub struct AddRentalCpiBuilder<'a, 'b> {
    instruction: Box<AddRentalCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AddRentalCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AddRentalCpiBuilderInstruction {
            __program: program,
            owner_profile: None,
            owner_key: None,
            invalidator: None,
            fleet: None,
            game_id: None,
            owner_key_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The fleet owner's profile.
    #[inline(always)]
    pub fn owner_profile(
        &mut self,
        owner_profile: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.owner_profile = Some(owner_profile);
        self
    }
    /// The key on the owner profile with renting permissions.
    #[inline(always)]
    pub fn owner_key(&mut self, owner_key: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner_key = Some(owner_key);
        self
    }
    /// The fleet rental invalidator - this is a signer to help make sure the fleet won't be locked.
    #[inline(always)]
    pub fn invalidator(
        &mut self,
        invalidator: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.invalidator = Some(invalidator);
        self
    }
    /// The fleet to rent out.
    #[inline(always)]
    pub fn fleet(&mut self, fleet: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.fleet = Some(fleet);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    #[inline(always)]
    pub fn owner_key_index(&mut self, owner_key_index: u16) -> &mut Self {
        self.instruction.owner_key_index = Some(owner_key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = AddRentalInstructionArgs {
            owner_key_index: self
                .instruction
                .owner_key_index
                .clone()
                .expect("owner_key_index is not set"),
        };
        let instruction = AddRentalCpi {
            __program: self.instruction.__program,

            owner_profile: self
                .instruction
                .owner_profile
                .expect("owner_profile is not set"),

            owner_key: self.instruction.owner_key.expect("owner_key is not set"),

            invalidator: self
                .instruction
                .invalidator
                .expect("invalidator is not set"),

            fleet: self.instruction.fleet.expect("fleet is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AddRentalCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    owner_profile: Option<&'b solana_account_info::AccountInfo<'a>>,
    owner_key: Option<&'b solana_account_info::AccountInfo<'a>>,
    invalidator: Option<&'b solana_account_info::AccountInfo<'a>>,
    fleet: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_account_info::AccountInfo<'a>>,
    owner_key_index: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
