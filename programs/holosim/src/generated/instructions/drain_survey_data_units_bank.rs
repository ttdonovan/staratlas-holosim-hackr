//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::KeyIndexInput;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct DrainSurveyDataUnitsBank {
    /// The key authorized for this instruction
    pub key: solana_program::pubkey::Pubkey,
    /// The [`Profile`] account
    pub profile: solana_program::pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_program::pubkey::Pubkey,
    /// Where the closing rent refunds go.
    pub funds_to: solana_program::pubkey::Pubkey,
    /// The [`SurveyDataUnitTracker`] account
    pub survey_data_unit_tracker: solana_program::pubkey::Pubkey,
    /// The `SurveyDataUnitTracker` signer
    pub survey_data_unit_tracker_signer: solana_program::pubkey::Pubkey,
    /// The SDU token bank to drain
    pub token_from: solana_program::pubkey::Pubkey,
    /// Where to send tokens from the bank
    pub token_to: solana_program::pubkey::Pubkey,
    /// The [Token] program
    pub token_program: solana_program::pubkey::Pubkey,
}

impl DrainSurveyDataUnitsBank {
    pub fn instruction(
        &self,
        args: DrainSurveyDataUnitsBankInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: DrainSurveyDataUnitsBankInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.funds_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.survey_data_unit_tracker,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.survey_data_unit_tracker_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_from,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&DrainSurveyDataUnitsBankInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DrainSurveyDataUnitsBankInstructionData {
    discriminator: [u8; 8],
}

impl DrainSurveyDataUnitsBankInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [227, 99, 86, 55, 218, 201, 96, 208],
        }
    }
}

impl Default for DrainSurveyDataUnitsBankInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DrainSurveyDataUnitsBankInstructionArgs {
    pub input: KeyIndexInput,
}

/// Instruction builder for `DrainSurveyDataUnitsBank`.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` profile
///   2. `[]` game_id
///   3. `[writable]` funds_to
///   4. `[]` survey_data_unit_tracker
///   5. `[]` survey_data_unit_tracker_signer
///   6. `[writable]` token_from
///   7. `[writable]` token_to
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct DrainSurveyDataUnitsBankBuilder {
    key: Option<solana_program::pubkey::Pubkey>,
    profile: Option<solana_program::pubkey::Pubkey>,
    game_id: Option<solana_program::pubkey::Pubkey>,
    funds_to: Option<solana_program::pubkey::Pubkey>,
    survey_data_unit_tracker: Option<solana_program::pubkey::Pubkey>,
    survey_data_unit_tracker_signer: Option<solana_program::pubkey::Pubkey>,
    token_from: Option<solana_program::pubkey::Pubkey>,
    token_to: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    input: Option<KeyIndexInput>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DrainSurveyDataUnitsBankBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: solana_program::pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_program::pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// Where the closing rent refunds go.
    #[inline(always)]
    pub fn funds_to(&mut self, funds_to: solana_program::pubkey::Pubkey) -> &mut Self {
        self.funds_to = Some(funds_to);
        self
    }
    /// The [`SurveyDataUnitTracker`] account
    #[inline(always)]
    pub fn survey_data_unit_tracker(
        &mut self,
        survey_data_unit_tracker: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.survey_data_unit_tracker = Some(survey_data_unit_tracker);
        self
    }
    /// The `SurveyDataUnitTracker` signer
    #[inline(always)]
    pub fn survey_data_unit_tracker_signer(
        &mut self,
        survey_data_unit_tracker_signer: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.survey_data_unit_tracker_signer = Some(survey_data_unit_tracker_signer);
        self
    }
    /// The SDU token bank to drain
    #[inline(always)]
    pub fn token_from(&mut self, token_from: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_from = Some(token_from);
        self
    }
    /// Where to send tokens from the bank
    #[inline(always)]
    pub fn token_to(&mut self, token_to: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_to = Some(token_to);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// The [Token] program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn input(&mut self, input: KeyIndexInput) -> &mut Self {
        self.input = Some(input);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = DrainSurveyDataUnitsBank {
            key: self.key.expect("key is not set"),
            profile: self.profile.expect("profile is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            funds_to: self.funds_to.expect("funds_to is not set"),
            survey_data_unit_tracker: self
                .survey_data_unit_tracker
                .expect("survey_data_unit_tracker is not set"),
            survey_data_unit_tracker_signer: self
                .survey_data_unit_tracker_signer
                .expect("survey_data_unit_tracker_signer is not set"),
            token_from: self.token_from.expect("token_from is not set"),
            token_to: self.token_to.expect("token_to is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = DrainSurveyDataUnitsBankInstructionArgs {
            input: self.input.clone().expect("input is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `drain_survey_data_units_bank` CPI accounts.
pub struct DrainSurveyDataUnitsBankCpiAccounts<'a, 'b> {
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// Where the closing rent refunds go.
    pub funds_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`SurveyDataUnitTracker`] account
    pub survey_data_unit_tracker: &'b solana_program::account_info::AccountInfo<'a>,
    /// The `SurveyDataUnitTracker` signer
    pub survey_data_unit_tracker_signer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The SDU token bank to drain
    pub token_from: &'b solana_program::account_info::AccountInfo<'a>,
    /// Where to send tokens from the bank
    pub token_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [Token] program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `drain_survey_data_units_bank` CPI instruction.
pub struct DrainSurveyDataUnitsBankCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// Where the closing rent refunds go.
    pub funds_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`SurveyDataUnitTracker`] account
    pub survey_data_unit_tracker: &'b solana_program::account_info::AccountInfo<'a>,
    /// The `SurveyDataUnitTracker` signer
    pub survey_data_unit_tracker_signer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The SDU token bank to drain
    pub token_from: &'b solana_program::account_info::AccountInfo<'a>,
    /// Where to send tokens from the bank
    pub token_to: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [Token] program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: DrainSurveyDataUnitsBankInstructionArgs,
}

impl<'a, 'b> DrainSurveyDataUnitsBankCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: DrainSurveyDataUnitsBankCpiAccounts<'a, 'b>,
        args: DrainSurveyDataUnitsBankInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            key: accounts.key,
            profile: accounts.profile,
            game_id: accounts.game_id,
            funds_to: accounts.funds_to,
            survey_data_unit_tracker: accounts.survey_data_unit_tracker,
            survey_data_unit_tracker_signer: accounts.survey_data_unit_tracker_signer,
            token_from: accounts.token_from,
            token_to: accounts.token_to,
            token_program: accounts.token_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.funds_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.survey_data_unit_tracker.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.survey_data_unit_tracker_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_from.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&DrainSurveyDataUnitsBankInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.funds_to.clone());
        account_infos.push(self.survey_data_unit_tracker.clone());
        account_infos.push(self.survey_data_unit_tracker_signer.clone());
        account_infos.push(self.token_from.clone());
        account_infos.push(self.token_to.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DrainSurveyDataUnitsBank` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` profile
///   2. `[]` game_id
///   3. `[writable]` funds_to
///   4. `[]` survey_data_unit_tracker
///   5. `[]` survey_data_unit_tracker_signer
///   6. `[writable]` token_from
///   7. `[writable]` token_to
///   8. `[]` token_program
#[derive(Clone, Debug)]
pub struct DrainSurveyDataUnitsBankCpiBuilder<'a, 'b> {
    instruction: Box<DrainSurveyDataUnitsBankCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DrainSurveyDataUnitsBankCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DrainSurveyDataUnitsBankCpiBuilderInstruction {
            __program: program,
            key: None,
            profile: None,
            game_id: None,
            funds_to: None,
            survey_data_unit_tracker: None,
            survey_data_unit_tracker_signer: None,
            token_from: None,
            token_to: None,
            token_program: None,
            input: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(
        &mut self,
        profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(
        &mut self,
        game_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// Where the closing rent refunds go.
    #[inline(always)]
    pub fn funds_to(
        &mut self,
        funds_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.funds_to = Some(funds_to);
        self
    }
    /// The [`SurveyDataUnitTracker`] account
    #[inline(always)]
    pub fn survey_data_unit_tracker(
        &mut self,
        survey_data_unit_tracker: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.survey_data_unit_tracker = Some(survey_data_unit_tracker);
        self
    }
    /// The `SurveyDataUnitTracker` signer
    #[inline(always)]
    pub fn survey_data_unit_tracker_signer(
        &mut self,
        survey_data_unit_tracker_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.survey_data_unit_tracker_signer = Some(survey_data_unit_tracker_signer);
        self
    }
    /// The SDU token bank to drain
    #[inline(always)]
    pub fn token_from(
        &mut self,
        token_from: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_from = Some(token_from);
        self
    }
    /// Where to send tokens from the bank
    #[inline(always)]
    pub fn token_to(
        &mut self,
        token_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_to = Some(token_to);
        self
    }
    /// The [Token] program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn input(&mut self, input: KeyIndexInput) -> &mut Self {
        self.instruction.input = Some(input);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = DrainSurveyDataUnitsBankInstructionArgs {
            input: self.instruction.input.clone().expect("input is not set"),
        };
        let instruction = DrainSurveyDataUnitsBankCpi {
            __program: self.instruction.__program,

            key: self.instruction.key.expect("key is not set"),

            profile: self.instruction.profile.expect("profile is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            funds_to: self.instruction.funds_to.expect("funds_to is not set"),

            survey_data_unit_tracker: self
                .instruction
                .survey_data_unit_tracker
                .expect("survey_data_unit_tracker is not set"),

            survey_data_unit_tracker_signer: self
                .instruction
                .survey_data_unit_tracker_signer
                .expect("survey_data_unit_tracker_signer is not set"),

            token_from: self.instruction.token_from.expect("token_from is not set"),

            token_to: self.instruction.token_to.expect("token_to is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DrainSurveyDataUnitsBankCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    key: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    funds_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    survey_data_unit_tracker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    survey_data_unit_tracker_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_from: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input: Option<KeyIndexInput>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
