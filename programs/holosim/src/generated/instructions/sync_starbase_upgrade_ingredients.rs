//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::KeyIndexInput;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const SYNC_STARBASE_UPGRADE_INGREDIENTS_DISCRIMINATOR: [u8; 8] =
    [169, 253, 2, 19, 46, 73, 18, 220];

/// Accounts.
#[derive(Debug)]
pub struct SyncStarbaseUpgradeIngredients {
    /// The funder for the new crafting process
    pub funder: solana_pubkey::Pubkey,
    /// The [`Starbase`] account
    pub starbase: solana_pubkey::Pubkey,
    /// The crafting recipe for the starbase upgrade
    pub upgrade_recipe: solana_pubkey::Pubkey,
    /// The key authorized for this instruction
    pub key: solana_pubkey::Pubkey,
    /// The [`Profile`] account
    pub profile: solana_pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_pubkey::Pubkey,
    /// The [`GameState`] account
    pub game_state: solana_pubkey::Pubkey,
    /// Solana System program
    pub system_program: solana_pubkey::Pubkey,
}

impl SyncStarbaseUpgradeIngredients {
    pub fn instruction(
        &self,
        args: SyncStarbaseUpgradeIngredientsInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SyncStarbaseUpgradeIngredientsInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.funder, true));
        accounts.push(solana_instruction::AccountMeta::new(self.starbase, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.upgrade_recipe,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.profile,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_state,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data =
            borsh::to_vec(&SyncStarbaseUpgradeIngredientsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SyncStarbaseUpgradeIngredientsInstructionData {
    discriminator: [u8; 8],
}

impl SyncStarbaseUpgradeIngredientsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [169, 253, 2, 19, 46, 73, 18, 220],
        }
    }
}

impl Default for SyncStarbaseUpgradeIngredientsInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SyncStarbaseUpgradeIngredientsInstructionArgs {
    pub input: KeyIndexInput,
}

/// Instruction builder for `SyncStarbaseUpgradeIngredients`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funder
///   1. `[writable]` starbase
///   2. `[]` upgrade_recipe
///   3. `[signer]` key
///   4. `[]` profile
///   5. `[]` game_id
///   6. `[]` game_state
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct SyncStarbaseUpgradeIngredientsBuilder {
    funder: Option<solana_pubkey::Pubkey>,
    starbase: Option<solana_pubkey::Pubkey>,
    upgrade_recipe: Option<solana_pubkey::Pubkey>,
    key: Option<solana_pubkey::Pubkey>,
    profile: Option<solana_pubkey::Pubkey>,
    game_id: Option<solana_pubkey::Pubkey>,
    game_state: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    input: Option<KeyIndexInput>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl SyncStarbaseUpgradeIngredientsBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The funder for the new crafting process
    #[inline(always)]
    pub fn funder(&mut self, funder: solana_pubkey::Pubkey) -> &mut Self {
        self.funder = Some(funder);
        self
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(&mut self, starbase: solana_pubkey::Pubkey) -> &mut Self {
        self.starbase = Some(starbase);
        self
    }
    /// The crafting recipe for the starbase upgrade
    #[inline(always)]
    pub fn upgrade_recipe(&mut self, upgrade_recipe: solana_pubkey::Pubkey) -> &mut Self {
        self.upgrade_recipe = Some(upgrade_recipe);
        self
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: solana_pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(&mut self, game_state: solana_pubkey::Pubkey) -> &mut Self {
        self.game_state = Some(game_state);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Solana System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn input(&mut self, input: KeyIndexInput) -> &mut Self {
        self.input = Some(input);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = SyncStarbaseUpgradeIngredients {
            funder: self.funder.expect("funder is not set"),
            starbase: self.starbase.expect("starbase is not set"),
            upgrade_recipe: self.upgrade_recipe.expect("upgrade_recipe is not set"),
            key: self.key.expect("key is not set"),
            profile: self.profile.expect("profile is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            game_state: self.game_state.expect("game_state is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = SyncStarbaseUpgradeIngredientsInstructionArgs {
            input: self.input.clone().expect("input is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `sync_starbase_upgrade_ingredients` CPI accounts.
pub struct SyncStarbaseUpgradeIngredientsCpiAccounts<'a, 'b> {
    /// The funder for the new crafting process
    pub funder: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The crafting recipe for the starbase upgrade
    pub upgrade_recipe: &'b solana_account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_account_info::AccountInfo<'a>,
    /// Solana System program
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `sync_starbase_upgrade_ingredients` CPI instruction.
pub struct SyncStarbaseUpgradeIngredientsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The funder for the new crafting process
    pub funder: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The crafting recipe for the starbase upgrade
    pub upgrade_recipe: &'b solana_account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_account_info::AccountInfo<'a>,
    /// Solana System program
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SyncStarbaseUpgradeIngredientsInstructionArgs,
}

impl<'a, 'b> SyncStarbaseUpgradeIngredientsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: SyncStarbaseUpgradeIngredientsCpiAccounts<'a, 'b>,
        args: SyncStarbaseUpgradeIngredientsInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            funder: accounts.funder,
            starbase: accounts.starbase,
            upgrade_recipe: accounts.upgrade_recipe,
            key: accounts.key,
            profile: accounts.profile,
            game_id: accounts.game_id,
            game_state: accounts.game_state,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.funder.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.starbase.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.upgrade_recipe.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data =
            borsh::to_vec(&SyncStarbaseUpgradeIngredientsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.funder.clone());
        account_infos.push(self.starbase.clone());
        account_infos.push(self.upgrade_recipe.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.game_state.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SyncStarbaseUpgradeIngredients` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funder
///   1. `[writable]` starbase
///   2. `[]` upgrade_recipe
///   3. `[signer]` key
///   4. `[]` profile
///   5. `[]` game_id
///   6. `[]` game_state
///   7. `[]` system_program
#[derive(Clone, Debug)]
pub struct SyncStarbaseUpgradeIngredientsCpiBuilder<'a, 'b> {
    instruction: Box<SyncStarbaseUpgradeIngredientsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SyncStarbaseUpgradeIngredientsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SyncStarbaseUpgradeIngredientsCpiBuilderInstruction {
            __program: program,
            funder: None,
            starbase: None,
            upgrade_recipe: None,
            key: None,
            profile: None,
            game_id: None,
            game_state: None,
            system_program: None,
            input: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The funder for the new crafting process
    #[inline(always)]
    pub fn funder(&mut self, funder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.funder = Some(funder);
        self
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(&mut self, starbase: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.starbase = Some(starbase);
        self
    }
    /// The crafting recipe for the starbase upgrade
    #[inline(always)]
    pub fn upgrade_recipe(
        &mut self,
        upgrade_recipe: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.upgrade_recipe = Some(upgrade_recipe);
        self
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(
        &mut self,
        game_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_state = Some(game_state);
        self
    }
    /// Solana System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn input(&mut self, input: KeyIndexInput) -> &mut Self {
        self.instruction.input = Some(input);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = SyncStarbaseUpgradeIngredientsInstructionArgs {
            input: self.instruction.input.clone().expect("input is not set"),
        };
        let instruction = SyncStarbaseUpgradeIngredientsCpi {
            __program: self.instruction.__program,

            funder: self.instruction.funder.expect("funder is not set"),

            starbase: self.instruction.starbase.expect("starbase is not set"),

            upgrade_recipe: self
                .instruction
                .upgrade_recipe
                .expect("upgrade_recipe is not set"),

            key: self.instruction.key.expect("key is not set"),

            profile: self.instruction.profile.expect("profile is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            game_state: self.instruction.game_state.expect("game_state is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SyncStarbaseUpgradeIngredientsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    funder: Option<&'b solana_account_info::AccountInfo<'a>>,
    starbase: Option<&'b solana_account_info::AccountInfo<'a>>,
    upgrade_recipe: Option<&'b solana_account_info::AccountInfo<'a>>,
    key: Option<&'b solana_account_info::AccountInfo<'a>>,
    profile: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    input: Option<KeyIndexInput>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
