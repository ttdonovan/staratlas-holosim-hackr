//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::RiskZonesDataUnpacked;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct UpdateGame {
    /// The key authorized for this instruction
    pub key: solana_program::pubkey::Pubkey,
    /// The [`Profile`] account
    pub profile: solana_program::pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_program::pubkey::Pubkey,
}

impl UpdateGame {
    pub fn instruction(
        &self,
        args: UpdateGameInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateGameInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.game_id,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&UpdateGameInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateGameInstructionData {
    discriminator: [u8; 8],
}

impl UpdateGameInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [159, 61, 132, 131, 3, 234, 209, 220],
        }
    }
}

impl Default for UpdateGameInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateGameInstructionArgs {
    pub cargo: u8,
    pub crafting: u8,
    pub mints: u8,
    pub vaults: u8,
    pub points: u8,
    pub risk_zones: Option<RiskZonesDataUnpacked>,
    pub key_index: u16,
}

/// Instruction builder for `UpdateGame`.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` profile
///   2. `[writable]` game_id
#[derive(Clone, Debug, Default)]
pub struct UpdateGameBuilder {
    key: Option<solana_program::pubkey::Pubkey>,
    profile: Option<solana_program::pubkey::Pubkey>,
    game_id: Option<solana_program::pubkey::Pubkey>,
    cargo: Option<u8>,
    crafting: Option<u8>,
    mints: Option<u8>,
    vaults: Option<u8>,
    points: Option<u8>,
    risk_zones: Option<RiskZonesDataUnpacked>,
    key_index: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateGameBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: solana_program::pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_program::pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    #[inline(always)]
    pub fn cargo(&mut self, cargo: u8) -> &mut Self {
        self.cargo = Some(cargo);
        self
    }
    #[inline(always)]
    pub fn crafting(&mut self, crafting: u8) -> &mut Self {
        self.crafting = Some(crafting);
        self
    }
    #[inline(always)]
    pub fn mints(&mut self, mints: u8) -> &mut Self {
        self.mints = Some(mints);
        self
    }
    #[inline(always)]
    pub fn vaults(&mut self, vaults: u8) -> &mut Self {
        self.vaults = Some(vaults);
        self
    }
    #[inline(always)]
    pub fn points(&mut self, points: u8) -> &mut Self {
        self.points = Some(points);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn risk_zones(&mut self, risk_zones: RiskZonesDataUnpacked) -> &mut Self {
        self.risk_zones = Some(risk_zones);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateGame {
            key: self.key.expect("key is not set"),
            profile: self.profile.expect("profile is not set"),
            game_id: self.game_id.expect("game_id is not set"),
        };
        let args = UpdateGameInstructionArgs {
            cargo: self.cargo.clone().expect("cargo is not set"),
            crafting: self.crafting.clone().expect("crafting is not set"),
            mints: self.mints.clone().expect("mints is not set"),
            vaults: self.vaults.clone().expect("vaults is not set"),
            points: self.points.clone().expect("points is not set"),
            risk_zones: self.risk_zones.clone(),
            key_index: self.key_index.clone().expect("key_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_game` CPI accounts.
pub struct UpdateGameCpiAccounts<'a, 'b> {
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_game` CPI instruction.
pub struct UpdateGameCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateGameInstructionArgs,
}

impl<'a, 'b> UpdateGameCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateGameCpiAccounts<'a, 'b>,
        args: UpdateGameInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            key: accounts.key,
            profile: accounts.profile,
            game_id: accounts.game_id,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.game_id.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&UpdateGameInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.game_id.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateGame` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` profile
///   2. `[writable]` game_id
#[derive(Clone, Debug)]
pub struct UpdateGameCpiBuilder<'a, 'b> {
    instruction: Box<UpdateGameCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateGameCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateGameCpiBuilderInstruction {
            __program: program,
            key: None,
            profile: None,
            game_id: None,
            cargo: None,
            crafting: None,
            mints: None,
            vaults: None,
            points: None,
            risk_zones: None,
            key_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(
        &mut self,
        profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(
        &mut self,
        game_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    #[inline(always)]
    pub fn cargo(&mut self, cargo: u8) -> &mut Self {
        self.instruction.cargo = Some(cargo);
        self
    }
    #[inline(always)]
    pub fn crafting(&mut self, crafting: u8) -> &mut Self {
        self.instruction.crafting = Some(crafting);
        self
    }
    #[inline(always)]
    pub fn mints(&mut self, mints: u8) -> &mut Self {
        self.instruction.mints = Some(mints);
        self
    }
    #[inline(always)]
    pub fn vaults(&mut self, vaults: u8) -> &mut Self {
        self.instruction.vaults = Some(vaults);
        self
    }
    #[inline(always)]
    pub fn points(&mut self, points: u8) -> &mut Self {
        self.instruction.points = Some(points);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn risk_zones(&mut self, risk_zones: RiskZonesDataUnpacked) -> &mut Self {
        self.instruction.risk_zones = Some(risk_zones);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.instruction.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateGameInstructionArgs {
            cargo: self.instruction.cargo.clone().expect("cargo is not set"),
            crafting: self
                .instruction
                .crafting
                .clone()
                .expect("crafting is not set"),
            mints: self.instruction.mints.clone().expect("mints is not set"),
            vaults: self.instruction.vaults.clone().expect("vaults is not set"),
            points: self.instruction.points.clone().expect("points is not set"),
            risk_zones: self.instruction.risk_zones.clone(),
            key_index: self
                .instruction
                .key_index
                .clone()
                .expect("key_index is not set"),
        };
        let instruction = UpdateGameCpi {
            __program: self.instruction.__program,

            key: self.instruction.key.expect("key is not set"),

            profile: self.instruction.profile.expect("profile is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateGameCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    key: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cargo: Option<u8>,
    crafting: Option<u8>,
    mints: Option<u8>,
    vaults: Option<u8>,
    points: Option<u8>,
    risk_zones: Option<RiskZonesDataUnpacked>,
    key_index: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
