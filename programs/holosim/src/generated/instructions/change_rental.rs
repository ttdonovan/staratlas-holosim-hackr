//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct ChangeRental {
    /// The fleet rental invalidator
    pub sub_profile_invalidator: solana_program::pubkey::Pubkey,
    /// The new sub profile
    pub new_sub_profile: solana_program::pubkey::Pubkey,
    /// The fleet
    pub fleet: solana_program::pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_program::pubkey::Pubkey,
    /// The faction that the sub_profile belongs to.
    pub sub_profile_faction: solana_program::pubkey::Pubkey,
}

impl ChangeRental {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sub_profile_invalidator,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.new_sub_profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fleet, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sub_profile_faction,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ChangeRentalInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ChangeRentalInstructionData {
    discriminator: [u8; 8],
}

impl ChangeRentalInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [107, 122, 221, 24, 12, 249, 70, 193],
        }
    }
}

impl Default for ChangeRentalInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `ChangeRental`.
///
/// ### Accounts:
///
///   0. `[signer]` sub_profile_invalidator
///   1. `[]` new_sub_profile
///   2. `[writable]` fleet
///   3. `[]` game_id
///   4. `[]` sub_profile_faction
#[derive(Clone, Debug, Default)]
pub struct ChangeRentalBuilder {
    sub_profile_invalidator: Option<solana_program::pubkey::Pubkey>,
    new_sub_profile: Option<solana_program::pubkey::Pubkey>,
    fleet: Option<solana_program::pubkey::Pubkey>,
    game_id: Option<solana_program::pubkey::Pubkey>,
    sub_profile_faction: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ChangeRentalBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The fleet rental invalidator
    #[inline(always)]
    pub fn sub_profile_invalidator(
        &mut self,
        sub_profile_invalidator: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sub_profile_invalidator = Some(sub_profile_invalidator);
        self
    }
    /// The new sub profile
    #[inline(always)]
    pub fn new_sub_profile(
        &mut self,
        new_sub_profile: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.new_sub_profile = Some(new_sub_profile);
        self
    }
    /// The fleet
    #[inline(always)]
    pub fn fleet(&mut self, fleet: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fleet = Some(fleet);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The faction that the sub_profile belongs to.
    #[inline(always)]
    pub fn sub_profile_faction(
        &mut self,
        sub_profile_faction: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sub_profile_faction = Some(sub_profile_faction);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ChangeRental {
            sub_profile_invalidator: self
                .sub_profile_invalidator
                .expect("sub_profile_invalidator is not set"),
            new_sub_profile: self.new_sub_profile.expect("new_sub_profile is not set"),
            fleet: self.fleet.expect("fleet is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            sub_profile_faction: self
                .sub_profile_faction
                .expect("sub_profile_faction is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `change_rental` CPI accounts.
pub struct ChangeRentalCpiAccounts<'a, 'b> {
    /// The fleet rental invalidator
    pub sub_profile_invalidator: &'b solana_program::account_info::AccountInfo<'a>,
    /// The new sub profile
    pub new_sub_profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The fleet
    pub fleet: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The faction that the sub_profile belongs to.
    pub sub_profile_faction: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `change_rental` CPI instruction.
pub struct ChangeRentalCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The fleet rental invalidator
    pub sub_profile_invalidator: &'b solana_program::account_info::AccountInfo<'a>,
    /// The new sub profile
    pub new_sub_profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The fleet
    pub fleet: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The faction that the sub_profile belongs to.
    pub sub_profile_faction: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> ChangeRentalCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ChangeRentalCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            sub_profile_invalidator: accounts.sub_profile_invalidator,
            new_sub_profile: accounts.new_sub_profile,
            fleet: accounts.fleet,
            game_id: accounts.game_id,
            sub_profile_faction: accounts.sub_profile_faction,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sub_profile_invalidator.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.new_sub_profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fleet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sub_profile_faction.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ChangeRentalInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.sub_profile_invalidator.clone());
        account_infos.push(self.new_sub_profile.clone());
        account_infos.push(self.fleet.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.sub_profile_faction.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ChangeRental` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` sub_profile_invalidator
///   1. `[]` new_sub_profile
///   2. `[writable]` fleet
///   3. `[]` game_id
///   4. `[]` sub_profile_faction
#[derive(Clone, Debug)]
pub struct ChangeRentalCpiBuilder<'a, 'b> {
    instruction: Box<ChangeRentalCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ChangeRentalCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ChangeRentalCpiBuilderInstruction {
            __program: program,
            sub_profile_invalidator: None,
            new_sub_profile: None,
            fleet: None,
            game_id: None,
            sub_profile_faction: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The fleet rental invalidator
    #[inline(always)]
    pub fn sub_profile_invalidator(
        &mut self,
        sub_profile_invalidator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sub_profile_invalidator = Some(sub_profile_invalidator);
        self
    }
    /// The new sub profile
    #[inline(always)]
    pub fn new_sub_profile(
        &mut self,
        new_sub_profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_sub_profile = Some(new_sub_profile);
        self
    }
    /// The fleet
    #[inline(always)]
    pub fn fleet(&mut self, fleet: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.fleet = Some(fleet);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(
        &mut self,
        game_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The faction that the sub_profile belongs to.
    #[inline(always)]
    pub fn sub_profile_faction(
        &mut self,
        sub_profile_faction: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sub_profile_faction = Some(sub_profile_faction);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = ChangeRentalCpi {
            __program: self.instruction.__program,

            sub_profile_invalidator: self
                .instruction
                .sub_profile_invalidator
                .expect("sub_profile_invalidator is not set"),

            new_sub_profile: self
                .instruction
                .new_sub_profile
                .expect("new_sub_profile is not set"),

            fleet: self.instruction.fleet.expect("fleet is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            sub_profile_faction: self
                .instruction
                .sub_profile_faction
                .expect("sub_profile_faction is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ChangeRentalCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    sub_profile_invalidator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_sub_profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fleet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sub_profile_faction: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
