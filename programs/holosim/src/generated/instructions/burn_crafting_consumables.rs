//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::IngredientIndexInput;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct BurnCraftingConsumables {
    /// The [`Starbase`] account
    pub starbase: solana_program::pubkey::Pubkey,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: solana_program::pubkey::Pubkey,
    /// The [`CraftingInstance`] account
    pub crafting_instance: solana_program::pubkey::Pubkey,
    /// The crafting process account
    pub crafting_process: solana_program::pubkey::Pubkey,
    /// The crafting facility account
    pub crafting_facility: solana_program::pubkey::Pubkey,
    /// The crafting recipe
    pub crafting_recipe: solana_program::pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_program::pubkey::Pubkey,
    /// The [`GameState`] account
    pub game_state: solana_program::pubkey::Pubkey,
    /// The source account of the tokens - owner should be `crafting_process`
    pub token_from: solana_program::pubkey::Pubkey,
    /// The token mint
    pub token_mint: solana_program::pubkey::Pubkey,
    /// The Crafting Program
    pub crafting_program: solana_program::pubkey::Pubkey,
    /// The [Token] program
    pub token_program: solana_program::pubkey::Pubkey,
}

impl BurnCraftingConsumables {
    pub fn instruction(
        &self,
        args: BurnCraftingConsumablesInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: BurnCraftingConsumablesInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.starbase,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.starbase_player,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.crafting_instance,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.crafting_process,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.crafting_facility,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.crafting_recipe,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_from,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.crafting_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&BurnCraftingConsumablesInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BurnCraftingConsumablesInstructionData {
    discriminator: [u8; 8],
}

impl BurnCraftingConsumablesInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [13, 225, 203, 91, 54, 232, 126, 170],
        }
    }
}

impl Default for BurnCraftingConsumablesInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BurnCraftingConsumablesInstructionArgs {
    pub input: IngredientIndexInput,
}

/// Instruction builder for `BurnCraftingConsumables`.
///
/// ### Accounts:
///
///   0. `[]` starbase
///   1. `[]` starbase_player
///   2. `[]` crafting_instance
///   3. `[writable]` crafting_process
///   4. `[]` crafting_facility
///   5. `[]` crafting_recipe
///   6. `[]` game_id
///   7. `[]` game_state
///   8. `[writable]` token_from
///   9. `[writable]` token_mint
///   10. `[]` crafting_program
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct BurnCraftingConsumablesBuilder {
    starbase: Option<solana_program::pubkey::Pubkey>,
    starbase_player: Option<solana_program::pubkey::Pubkey>,
    crafting_instance: Option<solana_program::pubkey::Pubkey>,
    crafting_process: Option<solana_program::pubkey::Pubkey>,
    crafting_facility: Option<solana_program::pubkey::Pubkey>,
    crafting_recipe: Option<solana_program::pubkey::Pubkey>,
    game_id: Option<solana_program::pubkey::Pubkey>,
    game_state: Option<solana_program::pubkey::Pubkey>,
    token_from: Option<solana_program::pubkey::Pubkey>,
    token_mint: Option<solana_program::pubkey::Pubkey>,
    crafting_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    input: Option<IngredientIndexInput>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BurnCraftingConsumablesBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(&mut self, starbase: solana_program::pubkey::Pubkey) -> &mut Self {
        self.starbase = Some(starbase);
        self
    }
    /// The [`StarbasePlayer`] Account
    #[inline(always)]
    pub fn starbase_player(
        &mut self,
        starbase_player: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.starbase_player = Some(starbase_player);
        self
    }
    /// The [`CraftingInstance`] account
    #[inline(always)]
    pub fn crafting_instance(
        &mut self,
        crafting_instance: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.crafting_instance = Some(crafting_instance);
        self
    }
    /// The crafting process account
    #[inline(always)]
    pub fn crafting_process(
        &mut self,
        crafting_process: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.crafting_process = Some(crafting_process);
        self
    }
    /// The crafting facility account
    #[inline(always)]
    pub fn crafting_facility(
        &mut self,
        crafting_facility: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.crafting_facility = Some(crafting_facility);
        self
    }
    /// The crafting recipe
    #[inline(always)]
    pub fn crafting_recipe(
        &mut self,
        crafting_recipe: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.crafting_recipe = Some(crafting_recipe);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(&mut self, game_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_state = Some(game_state);
        self
    }
    /// The source account of the tokens - owner should be `crafting_process`
    #[inline(always)]
    pub fn token_from(&mut self, token_from: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_from = Some(token_from);
        self
    }
    /// The token mint
    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }
    /// The Crafting Program
    #[inline(always)]
    pub fn crafting_program(
        &mut self,
        crafting_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.crafting_program = Some(crafting_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// The [Token] program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn input(&mut self, input: IngredientIndexInput) -> &mut Self {
        self.input = Some(input);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = BurnCraftingConsumables {
            starbase: self.starbase.expect("starbase is not set"),
            starbase_player: self.starbase_player.expect("starbase_player is not set"),
            crafting_instance: self
                .crafting_instance
                .expect("crafting_instance is not set"),
            crafting_process: self.crafting_process.expect("crafting_process is not set"),
            crafting_facility: self
                .crafting_facility
                .expect("crafting_facility is not set"),
            crafting_recipe: self.crafting_recipe.expect("crafting_recipe is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            game_state: self.game_state.expect("game_state is not set"),
            token_from: self.token_from.expect("token_from is not set"),
            token_mint: self.token_mint.expect("token_mint is not set"),
            crafting_program: self.crafting_program.expect("crafting_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = BurnCraftingConsumablesInstructionArgs {
            input: self.input.clone().expect("input is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `burn_crafting_consumables` CPI accounts.
pub struct BurnCraftingConsumablesCpiAccounts<'a, 'b> {
    /// The [`Starbase`] account
    pub starbase: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`CraftingInstance`] account
    pub crafting_instance: &'b solana_program::account_info::AccountInfo<'a>,
    /// The crafting process account
    pub crafting_process: &'b solana_program::account_info::AccountInfo<'a>,
    /// The crafting facility account
    pub crafting_facility: &'b solana_program::account_info::AccountInfo<'a>,
    /// The crafting recipe
    pub crafting_recipe: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The source account of the tokens - owner should be `crafting_process`
    pub token_from: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token mint
    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Crafting Program
    pub crafting_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [Token] program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `burn_crafting_consumables` CPI instruction.
pub struct BurnCraftingConsumablesCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub starbase: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`CraftingInstance`] account
    pub crafting_instance: &'b solana_program::account_info::AccountInfo<'a>,
    /// The crafting process account
    pub crafting_process: &'b solana_program::account_info::AccountInfo<'a>,
    /// The crafting facility account
    pub crafting_facility: &'b solana_program::account_info::AccountInfo<'a>,
    /// The crafting recipe
    pub crafting_recipe: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The source account of the tokens - owner should be `crafting_process`
    pub token_from: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token mint
    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Crafting Program
    pub crafting_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [Token] program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: BurnCraftingConsumablesInstructionArgs,
}

impl<'a, 'b> BurnCraftingConsumablesCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: BurnCraftingConsumablesCpiAccounts<'a, 'b>,
        args: BurnCraftingConsumablesInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            starbase: accounts.starbase,
            starbase_player: accounts.starbase_player,
            crafting_instance: accounts.crafting_instance,
            crafting_process: accounts.crafting_process,
            crafting_facility: accounts.crafting_facility,
            crafting_recipe: accounts.crafting_recipe,
            game_id: accounts.game_id,
            game_state: accounts.game_state,
            token_from: accounts.token_from,
            token_mint: accounts.token_mint,
            crafting_program: accounts.crafting_program,
            token_program: accounts.token_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.starbase.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.starbase_player.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.crafting_instance.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.crafting_process.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.crafting_facility.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.crafting_recipe.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_from.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.crafting_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&BurnCraftingConsumablesInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.starbase.clone());
        account_infos.push(self.starbase_player.clone());
        account_infos.push(self.crafting_instance.clone());
        account_infos.push(self.crafting_process.clone());
        account_infos.push(self.crafting_facility.clone());
        account_infos.push(self.crafting_recipe.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.game_state.clone());
        account_infos.push(self.token_from.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.crafting_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `BurnCraftingConsumables` via CPI.
///
/// ### Accounts:
///
///   0. `[]` starbase
///   1. `[]` starbase_player
///   2. `[]` crafting_instance
///   3. `[writable]` crafting_process
///   4. `[]` crafting_facility
///   5. `[]` crafting_recipe
///   6. `[]` game_id
///   7. `[]` game_state
///   8. `[writable]` token_from
///   9. `[writable]` token_mint
///   10. `[]` crafting_program
///   11. `[]` token_program
#[derive(Clone, Debug)]
pub struct BurnCraftingConsumablesCpiBuilder<'a, 'b> {
    instruction: Box<BurnCraftingConsumablesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BurnCraftingConsumablesCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(BurnCraftingConsumablesCpiBuilderInstruction {
            __program: program,
            starbase: None,
            starbase_player: None,
            crafting_instance: None,
            crafting_process: None,
            crafting_facility: None,
            crafting_recipe: None,
            game_id: None,
            game_state: None,
            token_from: None,
            token_mint: None,
            crafting_program: None,
            token_program: None,
            input: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(
        &mut self,
        starbase: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.starbase = Some(starbase);
        self
    }
    /// The [`StarbasePlayer`] Account
    #[inline(always)]
    pub fn starbase_player(
        &mut self,
        starbase_player: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.starbase_player = Some(starbase_player);
        self
    }
    /// The [`CraftingInstance`] account
    #[inline(always)]
    pub fn crafting_instance(
        &mut self,
        crafting_instance: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.crafting_instance = Some(crafting_instance);
        self
    }
    /// The crafting process account
    #[inline(always)]
    pub fn crafting_process(
        &mut self,
        crafting_process: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.crafting_process = Some(crafting_process);
        self
    }
    /// The crafting facility account
    #[inline(always)]
    pub fn crafting_facility(
        &mut self,
        crafting_facility: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.crafting_facility = Some(crafting_facility);
        self
    }
    /// The crafting recipe
    #[inline(always)]
    pub fn crafting_recipe(
        &mut self,
        crafting_recipe: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.crafting_recipe = Some(crafting_recipe);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(
        &mut self,
        game_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(
        &mut self,
        game_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_state = Some(game_state);
        self
    }
    /// The source account of the tokens - owner should be `crafting_process`
    #[inline(always)]
    pub fn token_from(
        &mut self,
        token_from: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_from = Some(token_from);
        self
    }
    /// The token mint
    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }
    /// The Crafting Program
    #[inline(always)]
    pub fn crafting_program(
        &mut self,
        crafting_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.crafting_program = Some(crafting_program);
        self
    }
    /// The [Token] program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn input(&mut self, input: IngredientIndexInput) -> &mut Self {
        self.instruction.input = Some(input);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = BurnCraftingConsumablesInstructionArgs {
            input: self.instruction.input.clone().expect("input is not set"),
        };
        let instruction = BurnCraftingConsumablesCpi {
            __program: self.instruction.__program,

            starbase: self.instruction.starbase.expect("starbase is not set"),

            starbase_player: self
                .instruction
                .starbase_player
                .expect("starbase_player is not set"),

            crafting_instance: self
                .instruction
                .crafting_instance
                .expect("crafting_instance is not set"),

            crafting_process: self
                .instruction
                .crafting_process
                .expect("crafting_process is not set"),

            crafting_facility: self
                .instruction
                .crafting_facility
                .expect("crafting_facility is not set"),

            crafting_recipe: self
                .instruction
                .crafting_recipe
                .expect("crafting_recipe is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            game_state: self.instruction.game_state.expect("game_state is not set"),

            token_from: self.instruction.token_from.expect("token_from is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            crafting_program: self
                .instruction
                .crafting_program
                .expect("crafting_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct BurnCraftingConsumablesCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    starbase: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    starbase_player: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    crafting_instance: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    crafting_process: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    crafting_facility: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    crafting_recipe: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_from: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    crafting_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input: Option<IngredientIndexInput>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
