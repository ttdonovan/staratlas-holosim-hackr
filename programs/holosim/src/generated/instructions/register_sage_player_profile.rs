//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const REGISTER_SAGE_PLAYER_PROFILE_DISCRIMINATOR: [u8; 8] =
    [88, 142, 218, 149, 75, 77, 228, 156];

/// Accounts.
#[derive(Debug)]
pub struct RegisterSagePlayerProfile {
    /// The player permissions [`Profile`]
    pub profile: solana_pubkey::Pubkey,
    /// The funder for the new profile
    pub funder: solana_pubkey::Pubkey,
    /// The `SagePlayerProfile` account
    pub sage_player_profile: solana_pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_pubkey::Pubkey,
    /// The [`GameState`] account
    pub game_state: solana_pubkey::Pubkey,
    /// The Solana System program
    pub system_program: solana_pubkey::Pubkey,
}

impl RegisterSagePlayerProfile {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.profile,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.funder, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.sage_player_profile,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_state,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&RegisterSagePlayerProfileInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RegisterSagePlayerProfileInstructionData {
    discriminator: [u8; 8],
}

impl RegisterSagePlayerProfileInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [88, 142, 218, 149, 75, 77, 228, 156],
        }
    }
}

impl Default for RegisterSagePlayerProfileInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `RegisterSagePlayerProfile`.
///
/// ### Accounts:
///
///   0. `[]` profile
///   1. `[writable, signer]` funder
///   2. `[writable]` sage_player_profile
///   3. `[]` game_id
///   4. `[]` game_state
///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct RegisterSagePlayerProfileBuilder {
    profile: Option<solana_pubkey::Pubkey>,
    funder: Option<solana_pubkey::Pubkey>,
    sage_player_profile: Option<solana_pubkey::Pubkey>,
    game_id: Option<solana_pubkey::Pubkey>,
    game_state: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl RegisterSagePlayerProfileBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The player permissions [`Profile`]
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// The funder for the new profile
    #[inline(always)]
    pub fn funder(&mut self, funder: solana_pubkey::Pubkey) -> &mut Self {
        self.funder = Some(funder);
        self
    }
    /// The `SagePlayerProfile` account
    #[inline(always)]
    pub fn sage_player_profile(&mut self, sage_player_profile: solana_pubkey::Pubkey) -> &mut Self {
        self.sage_player_profile = Some(sage_player_profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(&mut self, game_state: solana_pubkey::Pubkey) -> &mut Self {
        self.game_state = Some(game_state);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The Solana System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = RegisterSagePlayerProfile {
            profile: self.profile.expect("profile is not set"),
            funder: self.funder.expect("funder is not set"),
            sage_player_profile: self
                .sage_player_profile
                .expect("sage_player_profile is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            game_state: self.game_state.expect("game_state is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `register_sage_player_profile` CPI accounts.
pub struct RegisterSagePlayerProfileCpiAccounts<'a, 'b> {
    /// The player permissions [`Profile`]
    pub profile: &'b solana_account_info::AccountInfo<'a>,
    /// The funder for the new profile
    pub funder: &'b solana_account_info::AccountInfo<'a>,
    /// The `SagePlayerProfile` account
    pub sage_player_profile: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_account_info::AccountInfo<'a>,
    /// The Solana System program
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `register_sage_player_profile` CPI instruction.
pub struct RegisterSagePlayerProfileCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The player permissions [`Profile`]
    pub profile: &'b solana_account_info::AccountInfo<'a>,
    /// The funder for the new profile
    pub funder: &'b solana_account_info::AccountInfo<'a>,
    /// The `SagePlayerProfile` account
    pub sage_player_profile: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The [`GameState`] account
    pub game_state: &'b solana_account_info::AccountInfo<'a>,
    /// The Solana System program
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> RegisterSagePlayerProfileCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: RegisterSagePlayerProfileCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            profile: accounts.profile,
            funder: accounts.funder,
            sage_player_profile: accounts.sage_player_profile,
            game_id: accounts.game_id,
            game_state: accounts.game_state,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.funder.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.sage_player_profile.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&RegisterSagePlayerProfileInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.funder.clone());
        account_infos.push(self.sage_player_profile.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.game_state.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RegisterSagePlayerProfile` via CPI.
///
/// ### Accounts:
///
///   0. `[]` profile
///   1. `[writable, signer]` funder
///   2. `[writable]` sage_player_profile
///   3. `[]` game_id
///   4. `[]` game_state
///   5. `[]` system_program
#[derive(Clone, Debug)]
pub struct RegisterSagePlayerProfileCpiBuilder<'a, 'b> {
    instruction: Box<RegisterSagePlayerProfileCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RegisterSagePlayerProfileCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RegisterSagePlayerProfileCpiBuilderInstruction {
            __program: program,
            profile: None,
            funder: None,
            sage_player_profile: None,
            game_id: None,
            game_state: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The player permissions [`Profile`]
    #[inline(always)]
    pub fn profile(&mut self, profile: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The funder for the new profile
    #[inline(always)]
    pub fn funder(&mut self, funder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.funder = Some(funder);
        self
    }
    /// The `SagePlayerProfile` account
    #[inline(always)]
    pub fn sage_player_profile(
        &mut self,
        sage_player_profile: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sage_player_profile = Some(sage_player_profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The [`GameState`] account
    #[inline(always)]
    pub fn game_state(
        &mut self,
        game_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_state = Some(game_state);
        self
    }
    /// The Solana System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = RegisterSagePlayerProfileCpi {
            __program: self.instruction.__program,

            profile: self.instruction.profile.expect("profile is not set"),

            funder: self.instruction.funder.expect("funder is not set"),

            sage_player_profile: self
                .instruction
                .sage_player_profile
                .expect("sage_player_profile is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            game_state: self.instruction.game_state.expect("game_state is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct RegisterSagePlayerProfileCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    profile: Option<&'b solana_account_info::AccountInfo<'a>>,
    funder: Option<&'b solana_account_info::AccountInfo<'a>>,
    sage_player_profile: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
