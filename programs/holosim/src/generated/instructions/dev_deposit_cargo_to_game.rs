//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::CargoToGameInput;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const DEV_DEPOSIT_CARGO_TO_GAME_DISCRIMINATOR: [u8; 8] = [23, 246, 87, 208, 149, 87, 50, 92];

/// Accounts.
#[derive(Debug)]
pub struct DevDepositCargoToGame {
    /// The [`Starbase`] account
    pub starbase: solana_pubkey::Pubkey,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: solana_pubkey::Pubkey,
    /// The new cargo pod
    pub cargo_pod: solana_pubkey::Pubkey,
    /// The cargo type account
    pub cargo_type: solana_pubkey::Pubkey,
    /// The cargo stats definition account
    pub cargo_stats_definition: solana_pubkey::Pubkey,
    /// The key authorized for this instruction
    pub key: solana_pubkey::Pubkey,
    /// The [`Profile`] account
    pub profile: solana_pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_pubkey::Pubkey,
    /// The source token account - owned by the `key`
    pub token_from: solana_pubkey::Pubkey,
    /// The destination token account - owned by the `cargo_pod`
    pub token_to: solana_pubkey::Pubkey,
    /// The Cargo Program
    pub cargo_program: solana_pubkey::Pubkey,
    /// Token Program
    pub token_program: solana_pubkey::Pubkey,
}

impl DevDepositCargoToGame {
    pub fn instruction(
        &self,
        args: DevDepositCargoToGameInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: DevDepositCargoToGameInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.starbase,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.starbase_player,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.cargo_pod, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.cargo_type,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.cargo_stats_definition,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.profile,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.token_from, false));
        accounts.push(solana_instruction::AccountMeta::new(self.token_to, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.cargo_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&DevDepositCargoToGameInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DevDepositCargoToGameInstructionData {
    discriminator: [u8; 8],
}

impl DevDepositCargoToGameInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [23, 246, 87, 208, 149, 87, 50, 92],
        }
    }
}

impl Default for DevDepositCargoToGameInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DevDepositCargoToGameInstructionArgs {
    pub input: CargoToGameInput,
}

/// Instruction builder for `DevDepositCargoToGame`.
///
/// ### Accounts:
///
///   0. `[]` starbase
///   1. `[]` starbase_player
///   2. `[writable]` cargo_pod
///   3. `[]` cargo_type
///   4. `[]` cargo_stats_definition
///   5. `[signer]` key
///   6. `[]` profile
///   7. `[]` game_id
///   8. `[writable]` token_from
///   9. `[writable]` token_to
///   10. `[]` cargo_program
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct DevDepositCargoToGameBuilder {
    starbase: Option<solana_pubkey::Pubkey>,
    starbase_player: Option<solana_pubkey::Pubkey>,
    cargo_pod: Option<solana_pubkey::Pubkey>,
    cargo_type: Option<solana_pubkey::Pubkey>,
    cargo_stats_definition: Option<solana_pubkey::Pubkey>,
    key: Option<solana_pubkey::Pubkey>,
    profile: Option<solana_pubkey::Pubkey>,
    game_id: Option<solana_pubkey::Pubkey>,
    token_from: Option<solana_pubkey::Pubkey>,
    token_to: Option<solana_pubkey::Pubkey>,
    cargo_program: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    input: Option<CargoToGameInput>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl DevDepositCargoToGameBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(&mut self, starbase: solana_pubkey::Pubkey) -> &mut Self {
        self.starbase = Some(starbase);
        self
    }
    /// The [`StarbasePlayer`] Account
    #[inline(always)]
    pub fn starbase_player(&mut self, starbase_player: solana_pubkey::Pubkey) -> &mut Self {
        self.starbase_player = Some(starbase_player);
        self
    }
    /// The new cargo pod
    #[inline(always)]
    pub fn cargo_pod(&mut self, cargo_pod: solana_pubkey::Pubkey) -> &mut Self {
        self.cargo_pod = Some(cargo_pod);
        self
    }
    /// The cargo type account
    #[inline(always)]
    pub fn cargo_type(&mut self, cargo_type: solana_pubkey::Pubkey) -> &mut Self {
        self.cargo_type = Some(cargo_type);
        self
    }
    /// The cargo stats definition account
    #[inline(always)]
    pub fn cargo_stats_definition(
        &mut self,
        cargo_stats_definition: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.cargo_stats_definition = Some(cargo_stats_definition);
        self
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: solana_pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The source token account - owned by the `key`
    #[inline(always)]
    pub fn token_from(&mut self, token_from: solana_pubkey::Pubkey) -> &mut Self {
        self.token_from = Some(token_from);
        self
    }
    /// The destination token account - owned by the `cargo_pod`
    #[inline(always)]
    pub fn token_to(&mut self, token_to: solana_pubkey::Pubkey) -> &mut Self {
        self.token_to = Some(token_to);
        self
    }
    /// The Cargo Program
    #[inline(always)]
    pub fn cargo_program(&mut self, cargo_program: solana_pubkey::Pubkey) -> &mut Self {
        self.cargo_program = Some(cargo_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// Token Program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn input(&mut self, input: CargoToGameInput) -> &mut Self {
        self.input = Some(input);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = DevDepositCargoToGame {
            starbase: self.starbase.expect("starbase is not set"),
            starbase_player: self.starbase_player.expect("starbase_player is not set"),
            cargo_pod: self.cargo_pod.expect("cargo_pod is not set"),
            cargo_type: self.cargo_type.expect("cargo_type is not set"),
            cargo_stats_definition: self
                .cargo_stats_definition
                .expect("cargo_stats_definition is not set"),
            key: self.key.expect("key is not set"),
            profile: self.profile.expect("profile is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            token_from: self.token_from.expect("token_from is not set"),
            token_to: self.token_to.expect("token_to is not set"),
            cargo_program: self.cargo_program.expect("cargo_program is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = DevDepositCargoToGameInstructionArgs {
            input: self.input.clone().expect("input is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `dev_deposit_cargo_to_game` CPI accounts.
pub struct DevDepositCargoToGameCpiAccounts<'a, 'b> {
    /// The [`Starbase`] account
    pub starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: &'b solana_account_info::AccountInfo<'a>,
    /// The new cargo pod
    pub cargo_pod: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo type account
    pub cargo_type: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo stats definition account
    pub cargo_stats_definition: &'b solana_account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The source token account - owned by the `key`
    pub token_from: &'b solana_account_info::AccountInfo<'a>,
    /// The destination token account - owned by the `cargo_pod`
    pub token_to: &'b solana_account_info::AccountInfo<'a>,
    /// The Cargo Program
    pub cargo_program: &'b solana_account_info::AccountInfo<'a>,
    /// Token Program
    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `dev_deposit_cargo_to_game` CPI instruction.
pub struct DevDepositCargoToGameCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Starbase`] account
    pub starbase: &'b solana_account_info::AccountInfo<'a>,
    /// The [`StarbasePlayer`] Account
    pub starbase_player: &'b solana_account_info::AccountInfo<'a>,
    /// The new cargo pod
    pub cargo_pod: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo type account
    pub cargo_type: &'b solana_account_info::AccountInfo<'a>,
    /// The cargo stats definition account
    pub cargo_stats_definition: &'b solana_account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_account_info::AccountInfo<'a>,
    /// The source token account - owned by the `key`
    pub token_from: &'b solana_account_info::AccountInfo<'a>,
    /// The destination token account - owned by the `cargo_pod`
    pub token_to: &'b solana_account_info::AccountInfo<'a>,
    /// The Cargo Program
    pub cargo_program: &'b solana_account_info::AccountInfo<'a>,
    /// Token Program
    pub token_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: DevDepositCargoToGameInstructionArgs,
}

impl<'a, 'b> DevDepositCargoToGameCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: DevDepositCargoToGameCpiAccounts<'a, 'b>,
        args: DevDepositCargoToGameInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            starbase: accounts.starbase,
            starbase_player: accounts.starbase_player,
            cargo_pod: accounts.cargo_pod,
            cargo_type: accounts.cargo_type,
            cargo_stats_definition: accounts.cargo_stats_definition,
            key: accounts.key,
            profile: accounts.profile,
            game_id: accounts.game_id,
            token_from: accounts.token_from,
            token_to: accounts.token_to,
            cargo_program: accounts.cargo_program,
            token_program: accounts.token_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.starbase.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.starbase_player.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.cargo_pod.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.cargo_type.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.cargo_stats_definition.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_from.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_to.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.cargo_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&DevDepositCargoToGameInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.starbase.clone());
        account_infos.push(self.starbase_player.clone());
        account_infos.push(self.cargo_pod.clone());
        account_infos.push(self.cargo_type.clone());
        account_infos.push(self.cargo_stats_definition.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.token_from.clone());
        account_infos.push(self.token_to.clone());
        account_infos.push(self.cargo_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DevDepositCargoToGame` via CPI.
///
/// ### Accounts:
///
///   0. `[]` starbase
///   1. `[]` starbase_player
///   2. `[writable]` cargo_pod
///   3. `[]` cargo_type
///   4. `[]` cargo_stats_definition
///   5. `[signer]` key
///   6. `[]` profile
///   7. `[]` game_id
///   8. `[writable]` token_from
///   9. `[writable]` token_to
///   10. `[]` cargo_program
///   11. `[]` token_program
#[derive(Clone, Debug)]
pub struct DevDepositCargoToGameCpiBuilder<'a, 'b> {
    instruction: Box<DevDepositCargoToGameCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DevDepositCargoToGameCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DevDepositCargoToGameCpiBuilderInstruction {
            __program: program,
            starbase: None,
            starbase_player: None,
            cargo_pod: None,
            cargo_type: None,
            cargo_stats_definition: None,
            key: None,
            profile: None,
            game_id: None,
            token_from: None,
            token_to: None,
            cargo_program: None,
            token_program: None,
            input: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The [`Starbase`] account
    #[inline(always)]
    pub fn starbase(&mut self, starbase: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.starbase = Some(starbase);
        self
    }
    /// The [`StarbasePlayer`] Account
    #[inline(always)]
    pub fn starbase_player(
        &mut self,
        starbase_player: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.starbase_player = Some(starbase_player);
        self
    }
    /// The new cargo pod
    #[inline(always)]
    pub fn cargo_pod(&mut self, cargo_pod: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.cargo_pod = Some(cargo_pod);
        self
    }
    /// The cargo type account
    #[inline(always)]
    pub fn cargo_type(
        &mut self,
        cargo_type: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_type = Some(cargo_type);
        self
    }
    /// The cargo stats definition account
    #[inline(always)]
    pub fn cargo_stats_definition(
        &mut self,
        cargo_stats_definition: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_stats_definition = Some(cargo_stats_definition);
        self
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The source token account - owned by the `key`
    #[inline(always)]
    pub fn token_from(
        &mut self,
        token_from: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_from = Some(token_from);
        self
    }
    /// The destination token account - owned by the `cargo_pod`
    #[inline(always)]
    pub fn token_to(&mut self, token_to: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.token_to = Some(token_to);
        self
    }
    /// The Cargo Program
    #[inline(always)]
    pub fn cargo_program(
        &mut self,
        cargo_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cargo_program = Some(cargo_program);
        self
    }
    /// Token Program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn input(&mut self, input: CargoToGameInput) -> &mut Self {
        self.instruction.input = Some(input);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = DevDepositCargoToGameInstructionArgs {
            input: self.instruction.input.clone().expect("input is not set"),
        };
        let instruction = DevDepositCargoToGameCpi {
            __program: self.instruction.__program,

            starbase: self.instruction.starbase.expect("starbase is not set"),

            starbase_player: self
                .instruction
                .starbase_player
                .expect("starbase_player is not set"),

            cargo_pod: self.instruction.cargo_pod.expect("cargo_pod is not set"),

            cargo_type: self.instruction.cargo_type.expect("cargo_type is not set"),

            cargo_stats_definition: self
                .instruction
                .cargo_stats_definition
                .expect("cargo_stats_definition is not set"),

            key: self.instruction.key.expect("key is not set"),

            profile: self.instruction.profile.expect("profile is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            token_from: self.instruction.token_from.expect("token_from is not set"),

            token_to: self.instruction.token_to.expect("token_to is not set"),

            cargo_program: self
                .instruction
                .cargo_program
                .expect("cargo_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DevDepositCargoToGameCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    starbase: Option<&'b solana_account_info::AccountInfo<'a>>,
    starbase_player: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_pod: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_type: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_stats_definition: Option<&'b solana_account_info::AccountInfo<'a>>,
    key: Option<&'b solana_account_info::AccountInfo<'a>>,
    profile: Option<&'b solana_account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_from: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_to: Option<&'b solana_account_info::AccountInfo<'a>>,
    cargo_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    input: Option<CargoToGameInput>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
