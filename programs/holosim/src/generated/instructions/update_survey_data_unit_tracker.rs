//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct UpdateSurveyDataUnitTracker {
    /// The key authorized for this instruction
    pub key: solana_program::pubkey::Pubkey,
    /// The [`Profile`] account
    pub profile: solana_program::pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_program::pubkey::Pubkey,
    /// The [`SurveyDataUnitTracker`] account
    pub survey_data_unit_tracker: solana_program::pubkey::Pubkey,
}

impl UpdateSurveyDataUnitTracker {
    pub fn instruction(
        &self,
        args: UpdateSurveyDataUnitTrackerInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateSurveyDataUnitTrackerInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.survey_data_unit_tracker,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&UpdateSurveyDataUnitTrackerInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateSurveyDataUnitTrackerInstructionData {
    discriminator: [u8; 8],
}

impl UpdateSurveyDataUnitTrackerInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [206, 27, 247, 25, 221, 207, 219, 35],
        }
    }
}

impl Default for UpdateSurveyDataUnitTrackerInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateSurveyDataUnitTrackerInstructionArgs {
    pub coordinates_range: Option<[i64; 2]>,
    pub css_coordinates: Option<[[i64; 2]; 3]>,
    pub origin_coordinates: Option<[i64; 2]>,
    pub css_max_distance: Option<u32>,
    pub origin_max_distance: Option<u32>,
    pub distance_weighting: Option<u32>,
    pub t_max: Option<i64>,
    pub x_mul: Option<u32>,
    pub y_mul: Option<u32>,
    pub z_mul: Option<u32>,
    pub sdu_max_per_sector: Option<u32>,
    pub scan_chance_regen_period: Option<i16>,
    pub key_index: u16,
}

/// Instruction builder for `UpdateSurveyDataUnitTracker`.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` profile
///   2. `[]` game_id
///   3. `[writable]` survey_data_unit_tracker
#[derive(Clone, Debug, Default)]
pub struct UpdateSurveyDataUnitTrackerBuilder {
    key: Option<solana_program::pubkey::Pubkey>,
    profile: Option<solana_program::pubkey::Pubkey>,
    game_id: Option<solana_program::pubkey::Pubkey>,
    survey_data_unit_tracker: Option<solana_program::pubkey::Pubkey>,
    coordinates_range: Option<[i64; 2]>,
    css_coordinates: Option<[[i64; 2]; 3]>,
    origin_coordinates: Option<[i64; 2]>,
    css_max_distance: Option<u32>,
    origin_max_distance: Option<u32>,
    distance_weighting: Option<u32>,
    t_max: Option<i64>,
    x_mul: Option<u32>,
    y_mul: Option<u32>,
    z_mul: Option<u32>,
    sdu_max_per_sector: Option<u32>,
    scan_chance_regen_period: Option<i16>,
    key_index: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateSurveyDataUnitTrackerBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: solana_program::pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_program::pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The [`SurveyDataUnitTracker`] account
    #[inline(always)]
    pub fn survey_data_unit_tracker(
        &mut self,
        survey_data_unit_tracker: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.survey_data_unit_tracker = Some(survey_data_unit_tracker);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn coordinates_range(&mut self, coordinates_range: [i64; 2]) -> &mut Self {
        self.coordinates_range = Some(coordinates_range);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn css_coordinates(&mut self, css_coordinates: [[i64; 2]; 3]) -> &mut Self {
        self.css_coordinates = Some(css_coordinates);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn origin_coordinates(&mut self, origin_coordinates: [i64; 2]) -> &mut Self {
        self.origin_coordinates = Some(origin_coordinates);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn css_max_distance(&mut self, css_max_distance: u32) -> &mut Self {
        self.css_max_distance = Some(css_max_distance);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn origin_max_distance(&mut self, origin_max_distance: u32) -> &mut Self {
        self.origin_max_distance = Some(origin_max_distance);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn distance_weighting(&mut self, distance_weighting: u32) -> &mut Self {
        self.distance_weighting = Some(distance_weighting);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn t_max(&mut self, t_max: i64) -> &mut Self {
        self.t_max = Some(t_max);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn x_mul(&mut self, x_mul: u32) -> &mut Self {
        self.x_mul = Some(x_mul);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn y_mul(&mut self, y_mul: u32) -> &mut Self {
        self.y_mul = Some(y_mul);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn z_mul(&mut self, z_mul: u32) -> &mut Self {
        self.z_mul = Some(z_mul);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn sdu_max_per_sector(&mut self, sdu_max_per_sector: u32) -> &mut Self {
        self.sdu_max_per_sector = Some(sdu_max_per_sector);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn scan_chance_regen_period(&mut self, scan_chance_regen_period: i16) -> &mut Self {
        self.scan_chance_regen_period = Some(scan_chance_regen_period);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateSurveyDataUnitTracker {
            key: self.key.expect("key is not set"),
            profile: self.profile.expect("profile is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            survey_data_unit_tracker: self
                .survey_data_unit_tracker
                .expect("survey_data_unit_tracker is not set"),
        };
        let args = UpdateSurveyDataUnitTrackerInstructionArgs {
            coordinates_range: self.coordinates_range.clone(),
            css_coordinates: self.css_coordinates.clone(),
            origin_coordinates: self.origin_coordinates.clone(),
            css_max_distance: self.css_max_distance.clone(),
            origin_max_distance: self.origin_max_distance.clone(),
            distance_weighting: self.distance_weighting.clone(),
            t_max: self.t_max.clone(),
            x_mul: self.x_mul.clone(),
            y_mul: self.y_mul.clone(),
            z_mul: self.z_mul.clone(),
            sdu_max_per_sector: self.sdu_max_per_sector.clone(),
            scan_chance_regen_period: self.scan_chance_regen_period.clone(),
            key_index: self.key_index.clone().expect("key_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_survey_data_unit_tracker` CPI accounts.
pub struct UpdateSurveyDataUnitTrackerCpiAccounts<'a, 'b> {
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`SurveyDataUnitTracker`] account
    pub survey_data_unit_tracker: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_survey_data_unit_tracker` CPI instruction.
pub struct UpdateSurveyDataUnitTrackerCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`SurveyDataUnitTracker`] account
    pub survey_data_unit_tracker: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateSurveyDataUnitTrackerInstructionArgs,
}

impl<'a, 'b> UpdateSurveyDataUnitTrackerCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateSurveyDataUnitTrackerCpiAccounts<'a, 'b>,
        args: UpdateSurveyDataUnitTrackerInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            key: accounts.key,
            profile: accounts.profile,
            game_id: accounts.game_id,
            survey_data_unit_tracker: accounts.survey_data_unit_tracker,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.survey_data_unit_tracker.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&UpdateSurveyDataUnitTrackerInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.survey_data_unit_tracker.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateSurveyDataUnitTracker` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` profile
///   2. `[]` game_id
///   3. `[writable]` survey_data_unit_tracker
#[derive(Clone, Debug)]
pub struct UpdateSurveyDataUnitTrackerCpiBuilder<'a, 'b> {
    instruction: Box<UpdateSurveyDataUnitTrackerCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateSurveyDataUnitTrackerCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateSurveyDataUnitTrackerCpiBuilderInstruction {
            __program: program,
            key: None,
            profile: None,
            game_id: None,
            survey_data_unit_tracker: None,
            coordinates_range: None,
            css_coordinates: None,
            origin_coordinates: None,
            css_max_distance: None,
            origin_max_distance: None,
            distance_weighting: None,
            t_max: None,
            x_mul: None,
            y_mul: None,
            z_mul: None,
            sdu_max_per_sector: None,
            scan_chance_regen_period: None,
            key_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(
        &mut self,
        profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(
        &mut self,
        game_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The [`SurveyDataUnitTracker`] account
    #[inline(always)]
    pub fn survey_data_unit_tracker(
        &mut self,
        survey_data_unit_tracker: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.survey_data_unit_tracker = Some(survey_data_unit_tracker);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn coordinates_range(&mut self, coordinates_range: [i64; 2]) -> &mut Self {
        self.instruction.coordinates_range = Some(coordinates_range);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn css_coordinates(&mut self, css_coordinates: [[i64; 2]; 3]) -> &mut Self {
        self.instruction.css_coordinates = Some(css_coordinates);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn origin_coordinates(&mut self, origin_coordinates: [i64; 2]) -> &mut Self {
        self.instruction.origin_coordinates = Some(origin_coordinates);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn css_max_distance(&mut self, css_max_distance: u32) -> &mut Self {
        self.instruction.css_max_distance = Some(css_max_distance);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn origin_max_distance(&mut self, origin_max_distance: u32) -> &mut Self {
        self.instruction.origin_max_distance = Some(origin_max_distance);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn distance_weighting(&mut self, distance_weighting: u32) -> &mut Self {
        self.instruction.distance_weighting = Some(distance_weighting);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn t_max(&mut self, t_max: i64) -> &mut Self {
        self.instruction.t_max = Some(t_max);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn x_mul(&mut self, x_mul: u32) -> &mut Self {
        self.instruction.x_mul = Some(x_mul);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn y_mul(&mut self, y_mul: u32) -> &mut Self {
        self.instruction.y_mul = Some(y_mul);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn z_mul(&mut self, z_mul: u32) -> &mut Self {
        self.instruction.z_mul = Some(z_mul);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn sdu_max_per_sector(&mut self, sdu_max_per_sector: u32) -> &mut Self {
        self.instruction.sdu_max_per_sector = Some(sdu_max_per_sector);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn scan_chance_regen_period(&mut self, scan_chance_regen_period: i16) -> &mut Self {
        self.instruction.scan_chance_regen_period = Some(scan_chance_regen_period);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.instruction.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateSurveyDataUnitTrackerInstructionArgs {
            coordinates_range: self.instruction.coordinates_range.clone(),
            css_coordinates: self.instruction.css_coordinates.clone(),
            origin_coordinates: self.instruction.origin_coordinates.clone(),
            css_max_distance: self.instruction.css_max_distance.clone(),
            origin_max_distance: self.instruction.origin_max_distance.clone(),
            distance_weighting: self.instruction.distance_weighting.clone(),
            t_max: self.instruction.t_max.clone(),
            x_mul: self.instruction.x_mul.clone(),
            y_mul: self.instruction.y_mul.clone(),
            z_mul: self.instruction.z_mul.clone(),
            sdu_max_per_sector: self.instruction.sdu_max_per_sector.clone(),
            scan_chance_regen_period: self.instruction.scan_chance_regen_period.clone(),
            key_index: self
                .instruction
                .key_index
                .clone()
                .expect("key_index is not set"),
        };
        let instruction = UpdateSurveyDataUnitTrackerCpi {
            __program: self.instruction.__program,

            key: self.instruction.key.expect("key is not set"),

            profile: self.instruction.profile.expect("profile is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            survey_data_unit_tracker: self
                .instruction
                .survey_data_unit_tracker
                .expect("survey_data_unit_tracker is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateSurveyDataUnitTrackerCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    key: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    survey_data_unit_tracker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    coordinates_range: Option<[i64; 2]>,
    css_coordinates: Option<[[i64; 2]; 3]>,
    origin_coordinates: Option<[i64; 2]>,
    css_max_distance: Option<u32>,
    origin_max_distance: Option<u32>,
    distance_weighting: Option<u32>,
    t_max: Option<i64>,
    x_mul: Option<u32>,
    y_mul: Option<u32>,
    z_mul: Option<u32>,
    sdu_max_per_sector: Option<u32>,
    scan_chance_regen_period: Option<i16>,
    key_index: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
