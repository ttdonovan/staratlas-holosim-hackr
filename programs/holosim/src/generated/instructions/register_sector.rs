//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct RegisterSector {
    /// The key authorized for this instruction
    pub key: solana_program::pubkey::Pubkey,
    /// The [`Profile`] account
    pub profile: solana_program::pubkey::Pubkey,
    /// The [`Game`] account
    pub game_id: solana_program::pubkey::Pubkey,
    /// The funder for the new sector
    pub funder: solana_program::pubkey::Pubkey,
    /// The discoverer of this sector
    pub discoverer: solana_program::pubkey::Pubkey,
    /// The [`Sector`] account
    pub sector: solana_program::pubkey::Pubkey,
    /// The Solana System program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl RegisterSector {
    pub fn instruction(
        &self,
        args: RegisterSectorInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: RegisterSectorInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.key, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.profile,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.game_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.funder,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.discoverer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.sector,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&RegisterSectorInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RegisterSectorInstructionData {
    discriminator: [u8; 8],
}

impl RegisterSectorInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [55, 57, 58, 192, 36, 235, 36, 109],
        }
    }
}

impl Default for RegisterSectorInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RegisterSectorInstructionArgs {
    pub coordinates: [i64; 2],
    pub name: [u8; 64],
    pub key_index: u16,
}

/// Instruction builder for `RegisterSector`.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` profile
///   2. `[]` game_id
///   3. `[writable, signer]` funder
///   4. `[]` discoverer
///   5. `[writable]` sector
///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct RegisterSectorBuilder {
    key: Option<solana_program::pubkey::Pubkey>,
    profile: Option<solana_program::pubkey::Pubkey>,
    game_id: Option<solana_program::pubkey::Pubkey>,
    funder: Option<solana_program::pubkey::Pubkey>,
    discoverer: Option<solana_program::pubkey::Pubkey>,
    sector: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    coordinates: Option<[i64; 2]>,
    name: Option<[u8; 64]>,
    key_index: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl RegisterSectorBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: solana_program::pubkey::Pubkey) -> &mut Self {
        self.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(&mut self, profile: solana_program::pubkey::Pubkey) -> &mut Self {
        self.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(&mut self, game_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.game_id = Some(game_id);
        self
    }
    /// The funder for the new sector
    #[inline(always)]
    pub fn funder(&mut self, funder: solana_program::pubkey::Pubkey) -> &mut Self {
        self.funder = Some(funder);
        self
    }
    /// The discoverer of this sector
    #[inline(always)]
    pub fn discoverer(&mut self, discoverer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.discoverer = Some(discoverer);
        self
    }
    /// The [`Sector`] account
    #[inline(always)]
    pub fn sector(&mut self, sector: solana_program::pubkey::Pubkey) -> &mut Self {
        self.sector = Some(sector);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The Solana System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn coordinates(&mut self, coordinates: [i64; 2]) -> &mut Self {
        self.coordinates = Some(coordinates);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: [u8; 64]) -> &mut Self {
        self.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = RegisterSector {
            key: self.key.expect("key is not set"),
            profile: self.profile.expect("profile is not set"),
            game_id: self.game_id.expect("game_id is not set"),
            funder: self.funder.expect("funder is not set"),
            discoverer: self.discoverer.expect("discoverer is not set"),
            sector: self.sector.expect("sector is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = RegisterSectorInstructionArgs {
            coordinates: self.coordinates.clone().expect("coordinates is not set"),
            name: self.name.clone().expect("name is not set"),
            key_index: self.key_index.clone().expect("key_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `register_sector` CPI accounts.
pub struct RegisterSectorCpiAccounts<'a, 'b> {
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The funder for the new sector
    pub funder: &'b solana_program::account_info::AccountInfo<'a>,
    /// The discoverer of this sector
    pub discoverer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Sector`] account
    pub sector: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Solana System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `register_sector` CPI instruction.
pub struct RegisterSectorCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The key authorized for this instruction
    pub key: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Profile`] account
    pub profile: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Game`] account
    pub game_id: &'b solana_program::account_info::AccountInfo<'a>,
    /// The funder for the new sector
    pub funder: &'b solana_program::account_info::AccountInfo<'a>,
    /// The discoverer of this sector
    pub discoverer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [`Sector`] account
    pub sector: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Solana System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: RegisterSectorInstructionArgs,
}

impl<'a, 'b> RegisterSectorCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: RegisterSectorCpiAccounts<'a, 'b>,
        args: RegisterSectorInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            key: accounts.key,
            profile: accounts.profile,
            game_id: accounts.game_id,
            funder: accounts.funder,
            discoverer: accounts.discoverer,
            sector: accounts.sector,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.key.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.profile.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.game_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.funder.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.discoverer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.sector.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&RegisterSectorInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SAGE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.key.clone());
        account_infos.push(self.profile.clone());
        account_infos.push(self.game_id.clone());
        account_infos.push(self.funder.clone());
        account_infos.push(self.discoverer.clone());
        account_infos.push(self.sector.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RegisterSector` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` key
///   1. `[]` profile
///   2. `[]` game_id
///   3. `[writable, signer]` funder
///   4. `[]` discoverer
///   5. `[writable]` sector
///   6. `[]` system_program
#[derive(Clone, Debug)]
pub struct RegisterSectorCpiBuilder<'a, 'b> {
    instruction: Box<RegisterSectorCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RegisterSectorCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RegisterSectorCpiBuilderInstruction {
            __program: program,
            key: None,
            profile: None,
            game_id: None,
            funder: None,
            discoverer: None,
            sector: None,
            system_program: None,
            coordinates: None,
            name: None,
            key_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The key authorized for this instruction
    #[inline(always)]
    pub fn key(&mut self, key: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.key = Some(key);
        self
    }
    /// The [`Profile`] account
    #[inline(always)]
    pub fn profile(
        &mut self,
        profile: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.profile = Some(profile);
        self
    }
    /// The [`Game`] account
    #[inline(always)]
    pub fn game_id(
        &mut self,
        game_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
    }
    /// The funder for the new sector
    #[inline(always)]
    pub fn funder(
        &mut self,
        funder: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.funder = Some(funder);
        self
    }
    /// The discoverer of this sector
    #[inline(always)]
    pub fn discoverer(
        &mut self,
        discoverer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.discoverer = Some(discoverer);
        self
    }
    /// The [`Sector`] account
    #[inline(always)]
    pub fn sector(
        &mut self,
        sector: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sector = Some(sector);
        self
    }
    /// The Solana System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn coordinates(&mut self, coordinates: [i64; 2]) -> &mut Self {
        self.instruction.coordinates = Some(coordinates);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: [u8; 64]) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn key_index(&mut self, key_index: u16) -> &mut Self {
        self.instruction.key_index = Some(key_index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = RegisterSectorInstructionArgs {
            coordinates: self
                .instruction
                .coordinates
                .clone()
                .expect("coordinates is not set"),
            name: self.instruction.name.clone().expect("name is not set"),
            key_index: self
                .instruction
                .key_index
                .clone()
                .expect("key_index is not set"),
        };
        let instruction = RegisterSectorCpi {
            __program: self.instruction.__program,

            key: self.instruction.key.expect("key is not set"),

            profile: self.instruction.profile.expect("profile is not set"),

            game_id: self.instruction.game_id.expect("game_id is not set"),

            funder: self.instruction.funder.expect("funder is not set"),

            discoverer: self.instruction.discoverer.expect("discoverer is not set"),

            sector: self.instruction.sector.expect("sector is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct RegisterSectorCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    key: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    profile: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    game_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    funder: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    discoverer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sector: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    coordinates: Option<[i64; 2]>,
    name: Option<[u8; 64]>,
    key_index: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
